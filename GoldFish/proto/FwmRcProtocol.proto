package FwmRcProto;

message FrameworkInstanceInfo
{
    required uint32 framework_id = 1;
    required uint32 framework_instance_id = 2;
}

message GpuResourceInfo
{
    required string gpu_name = 1;
    optional uint32 gpu_mem_size = 2;
}

message ResourceInfo
{
    required double cpu_num = 1;
    required uint32 cpu_mem_size = 2;
    optional uint32 gpu_num = 3;
    repeated GpuResourceInfo gpu_resource_info = 4;
}

message EachModuleRequestOrReturnResourceInfo
{
    required uint32 resource_request_or_return_to_module_id = 1;
    optional ResourceInfo resource_info = 2;
}

message NetAddress
{
    required string ip = 1;
    optional uint32 port = 2;
}

message Register //cmd1
{
    required FrameworkInstanceInfo framework_instance_info = 1;
    required uint32 self_module_id = 2;
    optional NetAddress data_search_entry = 3;
}

message RegisterAck // cmd2
{
    required int32 statuscode = 1;
}

message EachModuleResourceInfo
{
    required string start_module_name = 1;
    required string ip = 2;
    optional ResourceInfo resource_info = 3;
    optional uint32 listen_port_num = 4;
}

message RequestStartSlave //cmd3
{
    required FrameworkInstanceInfo framework_instance_info = 1;
    required uint32 self_module_id = 2;
    repeated EachModuleResourceInfo start_module_resource_info = 3;
    optional NetAddress FWM_net_address = 4;
}

message RequestStartSlaveAck //cmd4
{
    required int32 statuscode = 1;
    repeated uint32 module_id = 2;
}

message RequestTaskResource
{
    required FrameworkInstanceInfo framework_instance_info = 1;
    required uint32 self_module_id = 2;
    repeated EachModuleRequestOrReturnResourceInfo module_add_resource_info = 3;
}

message RequestTaskResourceAck
{
    required int32 statuscode = 1;
    repeated uint32 exceed_module_id = 2;
}

message ReturnTaskResource
{
    required FrameworkInstanceInfo framework_instance_info = 1;
    required uint32 self_module_id = 2;
    repeated EachModuleRequestOrReturnResourceInfo module_return_resource_info = 3;
}

message ReturnTaskResourceAck
{
    required int32 statuscode = 1;
}

message StopModule //cmd5
{
    required FrameworkInstanceInfo framework_instance_info = 1;
    required uint32 self_module_id = 2;
    repeated uint32 stop_module_id = 3;
}

message StopModuleAck //cmd6
{
    required int32 statuscode = 1;
    repeated uint32 stop_module_id = 2;
}

message HeartBeatInfo //cmd7
{
    required FrameworkInstanceInfo framework_instance_info = 1;
    required uint32 self_module_id = 2;
}

message HeartBeatInfoAck //cmd8
{
    required int32 statuscode = 1;
}

message CloseFrameworkInstanceInfo
{
    required FrameworkInstanceInfo framework_instance_info = 1;
    required uint32 self_module_id = 2;
}

message CloseFrameworkInstanceInfoAck
{
    required int32 statuscode = 1;
}