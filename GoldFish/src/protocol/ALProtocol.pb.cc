// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ALProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace alproto {

namespace {

const ::google::protobuf::Descriptor* GpuResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GpuResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameworkIDInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkIDInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameworkInstanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkInstanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartRootModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartRootModule_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssignResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssignResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActualResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActualResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssignAndActualResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssignAndActualResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlatformAndMachineResouceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlatformAndMachineResouceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyAndUseResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyAndUseResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MachineInstanceResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineInstanceResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceMachineResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceMachineResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameworkInstanceResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkInstanceResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkAddress_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ALProtocol_2eproto() {
  protobuf_AddDesc_ALProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ALProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  GpuResourceInfo_descriptor_ = file->message_type(0);
  static const int GpuResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, gpu_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, gpu_mem_size_),
  };
  GpuResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GpuResourceInfo_descriptor_,
      GpuResourceInfo::default_instance_,
      GpuResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GpuResourceInfo));
  ResourceInfo_descriptor_ = file->message_type(1);
  static const int ResourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, cpu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, cpu_mem_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, gpu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, gpu_resource_info_),
  };
  ResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceInfo_descriptor_,
      ResourceInfo::default_instance_,
      ResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceInfo));
  FrameworkIDInfo_descriptor_ = file->message_type(2);
  static const int FrameworkIDInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkIDInfo, framework_id_),
  };
  FrameworkIDInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkIDInfo_descriptor_,
      FrameworkIDInfo::default_instance_,
      FrameworkIDInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkIDInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkIDInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkIDInfo));
  FrameworkInstanceInfo_descriptor_ = file->message_type(3);
  static const int FrameworkInstanceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, framework_instance_id_),
  };
  FrameworkInstanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkInstanceInfo_descriptor_,
      FrameworkInstanceInfo::default_instance_,
      FrameworkInstanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkInstanceInfo));
  StartRootModule_descriptor_ = file->message_type(4);
  static const int StartRootModule_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRootModule, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRootModule, image_lable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRootModule, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRootModule, location_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRootModule, nc_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRootModule, request_resource_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRootModule, listen_num_),
  };
  StartRootModule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartRootModule_descriptor_,
      StartRootModule::default_instance_,
      StartRootModule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRootModule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRootModule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartRootModule));
  AssignResourceInfo_descriptor_ = file->message_type(5);
  static const int AssignResourceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignResourceInfo, total_have_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignResourceInfo, total_not_assign_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignResourceInfo, total_already_assign_resource_),
  };
  AssignResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssignResourceInfo_descriptor_,
      AssignResourceInfo::default_instance_,
      AssignResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssignResourceInfo));
  ActualResourceInfo_descriptor_ = file->message_type(6);
  static const int ActualResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActualResourceInfo, total_use_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActualResourceInfo, total_not_use_resource_),
  };
  ActualResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActualResourceInfo_descriptor_,
      ActualResourceInfo::default_instance_,
      ActualResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActualResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActualResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActualResourceInfo));
  AssignAndActualResourceInfo_descriptor_ = file->message_type(7);
  static const int AssignAndActualResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignAndActualResourceInfo, assign_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignAndActualResourceInfo, actual_resource_),
  };
  AssignAndActualResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssignAndActualResourceInfo_descriptor_,
      AssignAndActualResourceInfo::default_instance_,
      AssignAndActualResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignAndActualResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignAndActualResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssignAndActualResourceInfo));
  PlatformAndMachineResouceInfo_descriptor_ = file->message_type(8);
  static const int PlatformAndMachineResouceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformAndMachineResouceInfo, platform_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformAndMachineResouceInfo, machine_resource_),
  };
  PlatformAndMachineResouceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlatformAndMachineResouceInfo_descriptor_,
      PlatformAndMachineResouceInfo::default_instance_,
      PlatformAndMachineResouceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformAndMachineResouceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformAndMachineResouceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlatformAndMachineResouceInfo));
  ApplyAndUseResourceInfo_descriptor_ = file->message_type(9);
  static const int ApplyAndUseResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyAndUseResourceInfo, apply_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyAndUseResourceInfo, use_resource_),
  };
  ApplyAndUseResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyAndUseResourceInfo_descriptor_,
      ApplyAndUseResourceInfo::default_instance_,
      ApplyAndUseResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyAndUseResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyAndUseResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyAndUseResourceInfo));
  MachineInstanceResourceInfo_descriptor_ = file->message_type(10);
  static const int MachineInstanceResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInstanceResourceInfo, nc_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInstanceResourceInfo, machine_apply_use_resource_),
  };
  MachineInstanceResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineInstanceResourceInfo_descriptor_,
      MachineInstanceResourceInfo::default_instance_,
      MachineInstanceResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInstanceResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInstanceResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineInstanceResourceInfo));
  InstanceMachineResourceInfo_descriptor_ = file->message_type(11);
  static const int InstanceMachineResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMachineResourceInfo, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMachineResourceInfo, instance_apply_use_resource_),
  };
  InstanceMachineResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceMachineResourceInfo_descriptor_,
      InstanceMachineResourceInfo::default_instance_,
      InstanceMachineResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMachineResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMachineResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceMachineResourceInfo));
  FrameworkInstanceResourceInfo_descriptor_ = file->message_type(12);
  static const int FrameworkInstanceResourceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceResourceInfo, instance_total_apply_use_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceResourceInfo, instance_at_machine_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceResourceInfo, machine_has_instance_resource_),
  };
  FrameworkInstanceResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkInstanceResourceInfo_descriptor_,
      FrameworkInstanceResourceInfo::default_instance_,
      FrameworkInstanceResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkInstanceResourceInfo));
  NetworkAddress_descriptor_ = file->message_type(13);
  static const int NetworkAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkAddress, node_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkAddress, node_port_),
  };
  NetworkAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkAddress_descriptor_,
      NetworkAddress::default_instance_,
      NetworkAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkAddress));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ALProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpuResourceInfo_descriptor_, &GpuResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceInfo_descriptor_, &ResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkIDInfo_descriptor_, &FrameworkIDInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkInstanceInfo_descriptor_, &FrameworkInstanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartRootModule_descriptor_, &StartRootModule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssignResourceInfo_descriptor_, &AssignResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActualResourceInfo_descriptor_, &ActualResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssignAndActualResourceInfo_descriptor_, &AssignAndActualResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlatformAndMachineResouceInfo_descriptor_, &PlatformAndMachineResouceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyAndUseResourceInfo_descriptor_, &ApplyAndUseResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineInstanceResourceInfo_descriptor_, &MachineInstanceResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceMachineResourceInfo_descriptor_, &InstanceMachineResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkInstanceResourceInfo_descriptor_, &FrameworkInstanceResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkAddress_descriptor_, &NetworkAddress::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ALProtocol_2eproto() {
  delete GpuResourceInfo::default_instance_;
  delete GpuResourceInfo_reflection_;
  delete ResourceInfo::default_instance_;
  delete ResourceInfo_reflection_;
  delete FrameworkIDInfo::default_instance_;
  delete FrameworkIDInfo_reflection_;
  delete FrameworkInstanceInfo::default_instance_;
  delete FrameworkInstanceInfo_reflection_;
  delete StartRootModule::default_instance_;
  delete StartRootModule_reflection_;
  delete AssignResourceInfo::default_instance_;
  delete AssignResourceInfo_reflection_;
  delete ActualResourceInfo::default_instance_;
  delete ActualResourceInfo_reflection_;
  delete AssignAndActualResourceInfo::default_instance_;
  delete AssignAndActualResourceInfo_reflection_;
  delete PlatformAndMachineResouceInfo::default_instance_;
  delete PlatformAndMachineResouceInfo_reflection_;
  delete ApplyAndUseResourceInfo::default_instance_;
  delete ApplyAndUseResourceInfo_reflection_;
  delete MachineInstanceResourceInfo::default_instance_;
  delete MachineInstanceResourceInfo_reflection_;
  delete InstanceMachineResourceInfo::default_instance_;
  delete InstanceMachineResourceInfo_reflection_;
  delete FrameworkInstanceResourceInfo::default_instance_;
  delete FrameworkInstanceResourceInfo_reflection_;
  delete NetworkAddress::default_instance_;
  delete NetworkAddress_reflection_;
}

void protobuf_AddDesc_ALProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ALProtocol.proto\022\007alproto\"9\n\017GpuResour"
    "ceInfo\022\020\n\010gpu_name\030\001 \002(\t\022\024\n\014gpu_mem_size"
    "\030\002 \001(\r\"{\n\014ResourceInfo\022\017\n\007cpu_num\030\001 \002(\001\022"
    "\024\n\014cpu_mem_size\030\002 \002(\r\022\017\n\007gpu_num\030\003 \001(\r\0223"
    "\n\021gpu_resource_info\030\004 \003(\0132\030.alproto.GpuR"
    "esourceInfo\"\'\n\017FrameworkIDInfo\022\024\n\014framew"
    "ork_id\030\001 \002(\r\"L\n\025FrameworkInstanceInfo\022\024\n"
    "\014framework_id\030\001 \002(\r\022\035\n\025framework_instanc"
    "e_id\030\002 \002(\r\"\306\001\n\017StartRootModule\022\024\n\014framew"
    "ork_id\030\001 \002(\r\022\023\n\013image_lable\030\002 \001(\t\022\023\n\013mod"
    "ule_name\030\003 \001(\t\022\032\n\022location_file_path\030\004 \001"
    "(\t\022\r\n\005nc_ip\030\005 \003(\t\0224\n\025request_resource_si"
    "ze\030\006 \001(\0132\025.alproto.ResourceInfo\022\022\n\nliste"
    "n_num\030\007 \001(\r\"\300\001\n\022AssignResourceInfo\0222\n\023to"
    "tal_have_resource\030\001 \002(\0132\025.alproto.Resour"
    "ceInfo\0228\n\031total_not_assign_resource\030\002 \001("
    "\0132\025.alproto.ResourceInfo\022<\n\035total_alread"
    "y_assign_resource\030\003 \001(\0132\025.alproto.Resour"
    "ceInfo\"~\n\022ActualResourceInfo\0221\n\022total_us"
    "e_resource\030\001 \002(\0132\025.alproto.ResourceInfo\022"
    "5\n\026total_not_use_resource\030\002 \001(\0132\025.alprot"
    "o.ResourceInfo\"\211\001\n\033AssignAndActualResour"
    "ceInfo\0224\n\017assign_resource\030\001 \002(\0132\033.alprot"
    "o.AssignResourceInfo\0224\n\017actual_resource\030"
    "\002 \001(\0132\033.alproto.ActualResourceInfo\"\240\001\n\035P"
    "latformAndMachineResouceInfo\022\?\n\021platform"
    "_resource\030\001 \002(\0132$.alproto.AssignAndActua"
    "lResourceInfo\022>\n\020machine_resource\030\002 \003(\0132"
    "$.alproto.AssignAndActualResourceInfo\"u\n"
    "\027ApplyAndUseResourceInfo\022-\n\016apply_resour"
    "ce\030\001 \002(\0132\025.alproto.ResourceInfo\022+\n\014use_r"
    "esource\030\002 \001(\0132\025.alproto.ResourceInfo\"r\n\033"
    "MachineInstanceResourceInfo\022\r\n\005nc_ip\030\001 \002"
    "(\t\022D\n\032machine_apply_use_resource\030\002 \001(\0132 "
    ".alproto.ApplyAndUseResourceInfo\"z\n\033Inst"
    "anceMachineResourceInfo\022\024\n\014framework_id\030"
    "\001 \002(\r\022E\n\033instance_apply_use_resource\030\002 \001"
    "(\0132 .alproto.ApplyAndUseResourceInfo\"\205\002\n"
    "\035FrameworkInstanceResourceInfo\022K\n!instan"
    "ce_total_apply_use_resource\030\001 \002(\0132 .alpr"
    "oto.ApplyAndUseResourceInfo\022J\n\034instance_"
    "at_machine_resource\030\002 \003(\0132$.alproto.Mach"
    "ineInstanceResourceInfo\022K\n\035machine_has_i"
    "nstance_resource\030\003 \003(\0132$.alproto.Instanc"
    "eMachineResourceInfo\"4\n\016NetworkAddress\022\017"
    "\n\007node_ip\030\001 \002(\t\022\021\n\tnode_port\030\002 \001(\r", 1834);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ALProtocol.proto", &protobuf_RegisterTypes);
  GpuResourceInfo::default_instance_ = new GpuResourceInfo();
  ResourceInfo::default_instance_ = new ResourceInfo();
  FrameworkIDInfo::default_instance_ = new FrameworkIDInfo();
  FrameworkInstanceInfo::default_instance_ = new FrameworkInstanceInfo();
  StartRootModule::default_instance_ = new StartRootModule();
  AssignResourceInfo::default_instance_ = new AssignResourceInfo();
  ActualResourceInfo::default_instance_ = new ActualResourceInfo();
  AssignAndActualResourceInfo::default_instance_ = new AssignAndActualResourceInfo();
  PlatformAndMachineResouceInfo::default_instance_ = new PlatformAndMachineResouceInfo();
  ApplyAndUseResourceInfo::default_instance_ = new ApplyAndUseResourceInfo();
  MachineInstanceResourceInfo::default_instance_ = new MachineInstanceResourceInfo();
  InstanceMachineResourceInfo::default_instance_ = new InstanceMachineResourceInfo();
  FrameworkInstanceResourceInfo::default_instance_ = new FrameworkInstanceResourceInfo();
  NetworkAddress::default_instance_ = new NetworkAddress();
  GpuResourceInfo::default_instance_->InitAsDefaultInstance();
  ResourceInfo::default_instance_->InitAsDefaultInstance();
  FrameworkIDInfo::default_instance_->InitAsDefaultInstance();
  FrameworkInstanceInfo::default_instance_->InitAsDefaultInstance();
  StartRootModule::default_instance_->InitAsDefaultInstance();
  AssignResourceInfo::default_instance_->InitAsDefaultInstance();
  ActualResourceInfo::default_instance_->InitAsDefaultInstance();
  AssignAndActualResourceInfo::default_instance_->InitAsDefaultInstance();
  PlatformAndMachineResouceInfo::default_instance_->InitAsDefaultInstance();
  ApplyAndUseResourceInfo::default_instance_->InitAsDefaultInstance();
  MachineInstanceResourceInfo::default_instance_->InitAsDefaultInstance();
  InstanceMachineResourceInfo::default_instance_->InitAsDefaultInstance();
  FrameworkInstanceResourceInfo::default_instance_->InitAsDefaultInstance();
  NetworkAddress::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ALProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ALProtocol_2eproto {
  StaticDescriptorInitializer_ALProtocol_2eproto() {
    protobuf_AddDesc_ALProtocol_2eproto();
  }
} static_descriptor_initializer_ALProtocol_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GpuResourceInfo::kGpuNameFieldNumber;
const int GpuResourceInfo::kGpuMemSizeFieldNumber;
#endif  // !_MSC_VER

GpuResourceInfo::GpuResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GpuResourceInfo::InitAsDefaultInstance() {
}

GpuResourceInfo::GpuResourceInfo(const GpuResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GpuResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  gpu_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gpu_mem_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpuResourceInfo::~GpuResourceInfo() {
  SharedDtor();
}

void GpuResourceInfo::SharedDtor() {
  if (gpu_name_ != &::google::protobuf::internal::kEmptyString) {
    delete gpu_name_;
  }
  if (this != default_instance_) {
  }
}

void GpuResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpuResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpuResourceInfo_descriptor_;
}

const GpuResourceInfo& GpuResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

GpuResourceInfo* GpuResourceInfo::default_instance_ = NULL;

GpuResourceInfo* GpuResourceInfo::New() const {
  return new GpuResourceInfo;
}

void GpuResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gpu_name()) {
      if (gpu_name_ != &::google::protobuf::internal::kEmptyString) {
        gpu_name_->clear();
      }
    }
    gpu_mem_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpuResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gpu_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpu_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpu_name().data(), this->gpu_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gpu_mem_size;
        break;
      }
      
      // optional uint32 gpu_mem_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_mem_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpu_mem_size_)));
          set_has_gpu_mem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GpuResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string gpu_name = 1;
  if (has_gpu_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpu_name().data(), this->gpu_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gpu_name(), output);
  }
  
  // optional uint32 gpu_mem_size = 2;
  if (has_gpu_mem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gpu_mem_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GpuResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string gpu_name = 1;
  if (has_gpu_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpu_name().data(), this->gpu_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gpu_name(), target);
  }
  
  // optional uint32 gpu_mem_size = 2;
  if (has_gpu_mem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gpu_mem_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GpuResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gpu_name = 1;
    if (has_gpu_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpu_name());
    }
    
    // optional uint32 gpu_mem_size = 2;
    if (has_gpu_mem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpu_mem_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpuResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpuResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GpuResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpuResourceInfo::MergeFrom(const GpuResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gpu_name()) {
      set_gpu_name(from.gpu_name());
    }
    if (from.has_gpu_mem_size()) {
      set_gpu_mem_size(from.gpu_mem_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpuResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpuResourceInfo::CopyFrom(const GpuResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GpuResourceInfo::Swap(GpuResourceInfo* other) {
  if (other != this) {
    std::swap(gpu_name_, other->gpu_name_);
    std::swap(gpu_mem_size_, other->gpu_mem_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GpuResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GpuResourceInfo_descriptor_;
  metadata.reflection = GpuResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceInfo::kCpuNumFieldNumber;
const int ResourceInfo::kCpuMemSizeFieldNumber;
const int ResourceInfo::kGpuNumFieldNumber;
const int ResourceInfo::kGpuResourceInfoFieldNumber;
#endif  // !_MSC_VER

ResourceInfo::ResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceInfo::InitAsDefaultInstance() {
}

ResourceInfo::ResourceInfo(const ResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  cpu_num_ = 0;
  cpu_mem_size_ = 0u;
  gpu_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceInfo::~ResourceInfo() {
  SharedDtor();
}

void ResourceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceInfo_descriptor_;
}

const ResourceInfo& ResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

ResourceInfo* ResourceInfo::default_instance_ = NULL;

ResourceInfo* ResourceInfo::New() const {
  return new ResourceInfo;
}

void ResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cpu_num_ = 0;
    cpu_mem_size_ = 0u;
    gpu_num_ = 0u;
  }
  gpu_resource_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double cpu_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_num_)));
          set_has_cpu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cpu_mem_size;
        break;
      }
      
      // required uint32 cpu_mem_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_mem_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_mem_size_)));
          set_has_cpu_mem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gpu_num;
        break;
      }
      
      // optional uint32 gpu_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpu_num_)));
          set_has_gpu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gpu_resource_info;
        break;
      }
      
      // repeated .alproto.GpuResourceInfo gpu_resource_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpu_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gpu_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gpu_resource_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double cpu_num = 1;
  if (has_cpu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cpu_num(), output);
  }
  
  // required uint32 cpu_mem_size = 2;
  if (has_cpu_mem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cpu_mem_size(), output);
  }
  
  // optional uint32 gpu_num = 3;
  if (has_gpu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gpu_num(), output);
  }
  
  // repeated .alproto.GpuResourceInfo gpu_resource_info = 4;
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gpu_resource_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double cpu_num = 1;
  if (has_cpu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cpu_num(), target);
  }
  
  // required uint32 cpu_mem_size = 2;
  if (has_cpu_mem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cpu_mem_size(), target);
  }
  
  // optional uint32 gpu_num = 3;
  if (has_gpu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gpu_num(), target);
  }
  
  // repeated .alproto.GpuResourceInfo gpu_resource_info = 4;
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gpu_resource_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double cpu_num = 1;
    if (has_cpu_num()) {
      total_size += 1 + 8;
    }
    
    // required uint32 cpu_mem_size = 2;
    if (has_cpu_mem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_mem_size());
    }
    
    // optional uint32 gpu_num = 3;
    if (has_gpu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpu_num());
    }
    
  }
  // repeated .alproto.GpuResourceInfo gpu_resource_info = 4;
  total_size += 1 * this->gpu_resource_info_size();
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gpu_resource_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceInfo::MergeFrom(const ResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gpu_resource_info_.MergeFrom(from.gpu_resource_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_num()) {
      set_cpu_num(from.cpu_num());
    }
    if (from.has_cpu_mem_size()) {
      set_cpu_mem_size(from.cpu_mem_size());
    }
    if (from.has_gpu_num()) {
      set_gpu_num(from.gpu_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceInfo::CopyFrom(const ResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < gpu_resource_info_size(); i++) {
    if (!this->gpu_resource_info(i).IsInitialized()) return false;
  }
  return true;
}

void ResourceInfo::Swap(ResourceInfo* other) {
  if (other != this) {
    std::swap(cpu_num_, other->cpu_num_);
    std::swap(cpu_mem_size_, other->cpu_mem_size_);
    std::swap(gpu_num_, other->gpu_num_);
    gpu_resource_info_.Swap(&other->gpu_resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceInfo_descriptor_;
  metadata.reflection = ResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameworkIDInfo::kFrameworkIdFieldNumber;
#endif  // !_MSC_VER

FrameworkIDInfo::FrameworkIDInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkIDInfo::InitAsDefaultInstance() {
}

FrameworkIDInfo::FrameworkIDInfo(const FrameworkIDInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkIDInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkIDInfo::~FrameworkIDInfo() {
  SharedDtor();
}

void FrameworkIDInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameworkIDInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkIDInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkIDInfo_descriptor_;
}

const FrameworkIDInfo& FrameworkIDInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

FrameworkIDInfo* FrameworkIDInfo::default_instance_ = NULL;

FrameworkIDInfo* FrameworkIDInfo::New() const {
  return new FrameworkIDInfo;
}

void FrameworkIDInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framework_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkIDInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framework_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_id_)));
          set_has_framework_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkIDInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framework_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkIDInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framework_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkIDInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 framework_id = 1;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkIDInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkIDInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkIDInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkIDInfo::MergeFrom(const FrameworkIDInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_id()) {
      set_framework_id(from.framework_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkIDInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkIDInfo::CopyFrom(const FrameworkIDInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkIDInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FrameworkIDInfo::Swap(FrameworkIDInfo* other) {
  if (other != this) {
    std::swap(framework_id_, other->framework_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkIDInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkIDInfo_descriptor_;
  metadata.reflection = FrameworkIDInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameworkInstanceInfo::kFrameworkIdFieldNumber;
const int FrameworkInstanceInfo::kFrameworkInstanceIdFieldNumber;
#endif  // !_MSC_VER

FrameworkInstanceInfo::FrameworkInstanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkInstanceInfo::InitAsDefaultInstance() {
}

FrameworkInstanceInfo::FrameworkInstanceInfo(const FrameworkInstanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkInstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_id_ = 0u;
  framework_instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkInstanceInfo::~FrameworkInstanceInfo() {
  SharedDtor();
}

void FrameworkInstanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameworkInstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkInstanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkInstanceInfo_descriptor_;
}

const FrameworkInstanceInfo& FrameworkInstanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

FrameworkInstanceInfo* FrameworkInstanceInfo::default_instance_ = NULL;

FrameworkInstanceInfo* FrameworkInstanceInfo::New() const {
  return new FrameworkInstanceInfo;
}

void FrameworkInstanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framework_id_ = 0u;
    framework_instance_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkInstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framework_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_id_)));
          set_has_framework_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_framework_instance_id;
        break;
      }
      
      // required uint32 framework_instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_framework_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_instance_id_)));
          set_has_framework_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkInstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framework_id(), output);
  }
  
  // required uint32 framework_instance_id = 2;
  if (has_framework_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->framework_instance_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkInstanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framework_id(), target);
  }
  
  // required uint32 framework_instance_id = 2;
  if (has_framework_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->framework_instance_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkInstanceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 framework_id = 1;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_id());
    }
    
    // required uint32 framework_instance_id = 2;
    if (has_framework_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_instance_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkInstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkInstanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkInstanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkInstanceInfo::MergeFrom(const FrameworkInstanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_id()) {
      set_framework_id(from.framework_id());
    }
    if (from.has_framework_instance_id()) {
      set_framework_instance_id(from.framework_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkInstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkInstanceInfo::CopyFrom(const FrameworkInstanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkInstanceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FrameworkInstanceInfo::Swap(FrameworkInstanceInfo* other) {
  if (other != this) {
    std::swap(framework_id_, other->framework_id_);
    std::swap(framework_instance_id_, other->framework_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkInstanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkInstanceInfo_descriptor_;
  metadata.reflection = FrameworkInstanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartRootModule::kFrameworkIdFieldNumber;
const int StartRootModule::kImageLableFieldNumber;
const int StartRootModule::kModuleNameFieldNumber;
const int StartRootModule::kLocationFilePathFieldNumber;
const int StartRootModule::kNcIpFieldNumber;
const int StartRootModule::kRequestResourceSizeFieldNumber;
const int StartRootModule::kListenNumFieldNumber;
#endif  // !_MSC_VER

StartRootModule::StartRootModule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartRootModule::InitAsDefaultInstance() {
  request_resource_size_ = const_cast< ::alproto::ResourceInfo*>(&::alproto::ResourceInfo::default_instance());
}

StartRootModule::StartRootModule(const StartRootModule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartRootModule::SharedCtor() {
  _cached_size_ = 0;
  framework_id_ = 0u;
  image_lable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_resource_size_ = NULL;
  listen_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartRootModule::~StartRootModule() {
  SharedDtor();
}

void StartRootModule::SharedDtor() {
  if (image_lable_ != &::google::protobuf::internal::kEmptyString) {
    delete image_lable_;
  }
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (location_file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete location_file_path_;
  }
  if (this != default_instance_) {
    delete request_resource_size_;
  }
}

void StartRootModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartRootModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartRootModule_descriptor_;
}

const StartRootModule& StartRootModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

StartRootModule* StartRootModule::default_instance_ = NULL;

StartRootModule* StartRootModule::New() const {
  return new StartRootModule;
}

void StartRootModule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framework_id_ = 0u;
    if (has_image_lable()) {
      if (image_lable_ != &::google::protobuf::internal::kEmptyString) {
        image_lable_->clear();
      }
    }
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
    if (has_location_file_path()) {
      if (location_file_path_ != &::google::protobuf::internal::kEmptyString) {
        location_file_path_->clear();
      }
    }
    if (has_request_resource_size()) {
      if (request_resource_size_ != NULL) request_resource_size_->::alproto::ResourceInfo::Clear();
    }
    listen_num_ = 0u;
  }
  nc_ip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartRootModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framework_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_id_)));
          set_has_framework_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image_lable;
        break;
      }
      
      // optional string image_lable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_lable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_lable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_lable().data(), this->image_lable().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_module_name;
        break;
      }
      
      // optional string module_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_location_file_path;
        break;
      }
      
      // optional string location_file_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location_file_path().data(), this->location_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nc_ip;
        break;
      }
      
      // repeated string nc_ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nc_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nc_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nc_ip(0).data(), this->nc_ip(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nc_ip;
        if (input->ExpectTag(50)) goto parse_request_resource_size;
        break;
      }
      
      // optional .alproto.ResourceInfo request_resource_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_resource_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_resource_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_listen_num;
        break;
      }
      
      // optional uint32 listen_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_num_)));
          set_has_listen_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartRootModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framework_id(), output);
  }
  
  // optional string image_lable = 2;
  if (has_image_lable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_lable().data(), this->image_lable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->image_lable(), output);
  }
  
  // optional string module_name = 3;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->module_name(), output);
  }
  
  // optional string location_file_path = 4;
  if (has_location_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location_file_path().data(), this->location_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->location_file_path(), output);
  }
  
  // repeated string nc_ip = 5;
  for (int i = 0; i < this->nc_ip_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nc_ip(i).data(), this->nc_ip(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nc_ip(i), output);
  }
  
  // optional .alproto.ResourceInfo request_resource_size = 6;
  if (has_request_resource_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->request_resource_size(), output);
  }
  
  // optional uint32 listen_num = 7;
  if (has_listen_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->listen_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartRootModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framework_id(), target);
  }
  
  // optional string image_lable = 2;
  if (has_image_lable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_lable().data(), this->image_lable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image_lable(), target);
  }
  
  // optional string module_name = 3;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->module_name(), target);
  }
  
  // optional string location_file_path = 4;
  if (has_location_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location_file_path().data(), this->location_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->location_file_path(), target);
  }
  
  // repeated string nc_ip = 5;
  for (int i = 0; i < this->nc_ip_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nc_ip(i).data(), this->nc_ip(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->nc_ip(i), target);
  }
  
  // optional .alproto.ResourceInfo request_resource_size = 6;
  if (has_request_resource_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->request_resource_size(), target);
  }
  
  // optional uint32 listen_num = 7;
  if (has_listen_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->listen_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartRootModule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 framework_id = 1;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_id());
    }
    
    // optional string image_lable = 2;
    if (has_image_lable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_lable());
    }
    
    // optional string module_name = 3;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }
    
    // optional string location_file_path = 4;
    if (has_location_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location_file_path());
    }
    
    // optional .alproto.ResourceInfo request_resource_size = 6;
    if (has_request_resource_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_resource_size());
    }
    
    // optional uint32 listen_num = 7;
    if (has_listen_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_num());
    }
    
  }
  // repeated string nc_ip = 5;
  total_size += 1 * this->nc_ip_size();
  for (int i = 0; i < this->nc_ip_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nc_ip(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartRootModule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartRootModule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartRootModule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartRootModule::MergeFrom(const StartRootModule& from) {
  GOOGLE_CHECK_NE(&from, this);
  nc_ip_.MergeFrom(from.nc_ip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_id()) {
      set_framework_id(from.framework_id());
    }
    if (from.has_image_lable()) {
      set_image_lable(from.image_lable());
    }
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_location_file_path()) {
      set_location_file_path(from.location_file_path());
    }
    if (from.has_request_resource_size()) {
      mutable_request_resource_size()->::alproto::ResourceInfo::MergeFrom(from.request_resource_size());
    }
    if (from.has_listen_num()) {
      set_listen_num(from.listen_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartRootModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRootModule::CopyFrom(const StartRootModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRootModule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_request_resource_size()) {
    if (!this->request_resource_size().IsInitialized()) return false;
  }
  return true;
}

void StartRootModule::Swap(StartRootModule* other) {
  if (other != this) {
    std::swap(framework_id_, other->framework_id_);
    std::swap(image_lable_, other->image_lable_);
    std::swap(module_name_, other->module_name_);
    std::swap(location_file_path_, other->location_file_path_);
    nc_ip_.Swap(&other->nc_ip_);
    std::swap(request_resource_size_, other->request_resource_size_);
    std::swap(listen_num_, other->listen_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartRootModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartRootModule_descriptor_;
  metadata.reflection = StartRootModule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssignResourceInfo::kTotalHaveResourceFieldNumber;
const int AssignResourceInfo::kTotalNotAssignResourceFieldNumber;
const int AssignResourceInfo::kTotalAlreadyAssignResourceFieldNumber;
#endif  // !_MSC_VER

AssignResourceInfo::AssignResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssignResourceInfo::InitAsDefaultInstance() {
  total_have_resource_ = const_cast< ::alproto::ResourceInfo*>(&::alproto::ResourceInfo::default_instance());
  total_not_assign_resource_ = const_cast< ::alproto::ResourceInfo*>(&::alproto::ResourceInfo::default_instance());
  total_already_assign_resource_ = const_cast< ::alproto::ResourceInfo*>(&::alproto::ResourceInfo::default_instance());
}

AssignResourceInfo::AssignResourceInfo(const AssignResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssignResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  total_have_resource_ = NULL;
  total_not_assign_resource_ = NULL;
  total_already_assign_resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssignResourceInfo::~AssignResourceInfo() {
  SharedDtor();
}

void AssignResourceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete total_have_resource_;
    delete total_not_assign_resource_;
    delete total_already_assign_resource_;
  }
}

void AssignResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssignResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssignResourceInfo_descriptor_;
}

const AssignResourceInfo& AssignResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

AssignResourceInfo* AssignResourceInfo::default_instance_ = NULL;

AssignResourceInfo* AssignResourceInfo::New() const {
  return new AssignResourceInfo;
}

void AssignResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_total_have_resource()) {
      if (total_have_resource_ != NULL) total_have_resource_->::alproto::ResourceInfo::Clear();
    }
    if (has_total_not_assign_resource()) {
      if (total_not_assign_resource_ != NULL) total_not_assign_resource_->::alproto::ResourceInfo::Clear();
    }
    if (has_total_already_assign_resource()) {
      if (total_already_assign_resource_ != NULL) total_already_assign_resource_->::alproto::ResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssignResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .alproto.ResourceInfo total_have_resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_have_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_total_not_assign_resource;
        break;
      }
      
      // optional .alproto.ResourceInfo total_not_assign_resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_not_assign_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_not_assign_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_total_already_assign_resource;
        break;
      }
      
      // optional .alproto.ResourceInfo total_already_assign_resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_already_assign_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_already_assign_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssignResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .alproto.ResourceInfo total_have_resource = 1;
  if (has_total_have_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->total_have_resource(), output);
  }
  
  // optional .alproto.ResourceInfo total_not_assign_resource = 2;
  if (has_total_not_assign_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->total_not_assign_resource(), output);
  }
  
  // optional .alproto.ResourceInfo total_already_assign_resource = 3;
  if (has_total_already_assign_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->total_already_assign_resource(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssignResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .alproto.ResourceInfo total_have_resource = 1;
  if (has_total_have_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->total_have_resource(), target);
  }
  
  // optional .alproto.ResourceInfo total_not_assign_resource = 2;
  if (has_total_not_assign_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->total_not_assign_resource(), target);
  }
  
  // optional .alproto.ResourceInfo total_already_assign_resource = 3;
  if (has_total_already_assign_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->total_already_assign_resource(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssignResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .alproto.ResourceInfo total_have_resource = 1;
    if (has_total_have_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_have_resource());
    }
    
    // optional .alproto.ResourceInfo total_not_assign_resource = 2;
    if (has_total_not_assign_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_not_assign_resource());
    }
    
    // optional .alproto.ResourceInfo total_already_assign_resource = 3;
    if (has_total_already_assign_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_already_assign_resource());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssignResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssignResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssignResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssignResourceInfo::MergeFrom(const AssignResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_have_resource()) {
      mutable_total_have_resource()->::alproto::ResourceInfo::MergeFrom(from.total_have_resource());
    }
    if (from.has_total_not_assign_resource()) {
      mutable_total_not_assign_resource()->::alproto::ResourceInfo::MergeFrom(from.total_not_assign_resource());
    }
    if (from.has_total_already_assign_resource()) {
      mutable_total_already_assign_resource()->::alproto::ResourceInfo::MergeFrom(from.total_already_assign_resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssignResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignResourceInfo::CopyFrom(const AssignResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_total_have_resource()) {
    if (!this->total_have_resource().IsInitialized()) return false;
  }
  if (has_total_not_assign_resource()) {
    if (!this->total_not_assign_resource().IsInitialized()) return false;
  }
  if (has_total_already_assign_resource()) {
    if (!this->total_already_assign_resource().IsInitialized()) return false;
  }
  return true;
}

void AssignResourceInfo::Swap(AssignResourceInfo* other) {
  if (other != this) {
    std::swap(total_have_resource_, other->total_have_resource_);
    std::swap(total_not_assign_resource_, other->total_not_assign_resource_);
    std::swap(total_already_assign_resource_, other->total_already_assign_resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssignResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssignResourceInfo_descriptor_;
  metadata.reflection = AssignResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActualResourceInfo::kTotalUseResourceFieldNumber;
const int ActualResourceInfo::kTotalNotUseResourceFieldNumber;
#endif  // !_MSC_VER

ActualResourceInfo::ActualResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActualResourceInfo::InitAsDefaultInstance() {
  total_use_resource_ = const_cast< ::alproto::ResourceInfo*>(&::alproto::ResourceInfo::default_instance());
  total_not_use_resource_ = const_cast< ::alproto::ResourceInfo*>(&::alproto::ResourceInfo::default_instance());
}

ActualResourceInfo::ActualResourceInfo(const ActualResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActualResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  total_use_resource_ = NULL;
  total_not_use_resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActualResourceInfo::~ActualResourceInfo() {
  SharedDtor();
}

void ActualResourceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete total_use_resource_;
    delete total_not_use_resource_;
  }
}

void ActualResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActualResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActualResourceInfo_descriptor_;
}

const ActualResourceInfo& ActualResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

ActualResourceInfo* ActualResourceInfo::default_instance_ = NULL;

ActualResourceInfo* ActualResourceInfo::New() const {
  return new ActualResourceInfo;
}

void ActualResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_total_use_resource()) {
      if (total_use_resource_ != NULL) total_use_resource_->::alproto::ResourceInfo::Clear();
    }
    if (has_total_not_use_resource()) {
      if (total_not_use_resource_ != NULL) total_not_use_resource_->::alproto::ResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActualResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .alproto.ResourceInfo total_use_resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_use_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_total_not_use_resource;
        break;
      }
      
      // optional .alproto.ResourceInfo total_not_use_resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_not_use_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_not_use_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActualResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .alproto.ResourceInfo total_use_resource = 1;
  if (has_total_use_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->total_use_resource(), output);
  }
  
  // optional .alproto.ResourceInfo total_not_use_resource = 2;
  if (has_total_not_use_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->total_not_use_resource(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActualResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .alproto.ResourceInfo total_use_resource = 1;
  if (has_total_use_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->total_use_resource(), target);
  }
  
  // optional .alproto.ResourceInfo total_not_use_resource = 2;
  if (has_total_not_use_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->total_not_use_resource(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActualResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .alproto.ResourceInfo total_use_resource = 1;
    if (has_total_use_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_use_resource());
    }
    
    // optional .alproto.ResourceInfo total_not_use_resource = 2;
    if (has_total_not_use_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_not_use_resource());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActualResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActualResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActualResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActualResourceInfo::MergeFrom(const ActualResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_use_resource()) {
      mutable_total_use_resource()->::alproto::ResourceInfo::MergeFrom(from.total_use_resource());
    }
    if (from.has_total_not_use_resource()) {
      mutable_total_not_use_resource()->::alproto::ResourceInfo::MergeFrom(from.total_not_use_resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActualResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActualResourceInfo::CopyFrom(const ActualResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActualResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_total_use_resource()) {
    if (!this->total_use_resource().IsInitialized()) return false;
  }
  if (has_total_not_use_resource()) {
    if (!this->total_not_use_resource().IsInitialized()) return false;
  }
  return true;
}

void ActualResourceInfo::Swap(ActualResourceInfo* other) {
  if (other != this) {
    std::swap(total_use_resource_, other->total_use_resource_);
    std::swap(total_not_use_resource_, other->total_not_use_resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActualResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActualResourceInfo_descriptor_;
  metadata.reflection = ActualResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssignAndActualResourceInfo::kAssignResourceFieldNumber;
const int AssignAndActualResourceInfo::kActualResourceFieldNumber;
#endif  // !_MSC_VER

AssignAndActualResourceInfo::AssignAndActualResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssignAndActualResourceInfo::InitAsDefaultInstance() {
  assign_resource_ = const_cast< ::alproto::AssignResourceInfo*>(&::alproto::AssignResourceInfo::default_instance());
  actual_resource_ = const_cast< ::alproto::ActualResourceInfo*>(&::alproto::ActualResourceInfo::default_instance());
}

AssignAndActualResourceInfo::AssignAndActualResourceInfo(const AssignAndActualResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssignAndActualResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  assign_resource_ = NULL;
  actual_resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssignAndActualResourceInfo::~AssignAndActualResourceInfo() {
  SharedDtor();
}

void AssignAndActualResourceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete assign_resource_;
    delete actual_resource_;
  }
}

void AssignAndActualResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssignAndActualResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssignAndActualResourceInfo_descriptor_;
}

const AssignAndActualResourceInfo& AssignAndActualResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

AssignAndActualResourceInfo* AssignAndActualResourceInfo::default_instance_ = NULL;

AssignAndActualResourceInfo* AssignAndActualResourceInfo::New() const {
  return new AssignAndActualResourceInfo;
}

void AssignAndActualResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_assign_resource()) {
      if (assign_resource_ != NULL) assign_resource_->::alproto::AssignResourceInfo::Clear();
    }
    if (has_actual_resource()) {
      if (actual_resource_ != NULL) actual_resource_->::alproto::ActualResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssignAndActualResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .alproto.AssignResourceInfo assign_resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assign_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actual_resource;
        break;
      }
      
      // optional .alproto.ActualResourceInfo actual_resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actual_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actual_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssignAndActualResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .alproto.AssignResourceInfo assign_resource = 1;
  if (has_assign_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assign_resource(), output);
  }
  
  // optional .alproto.ActualResourceInfo actual_resource = 2;
  if (has_actual_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actual_resource(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssignAndActualResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .alproto.AssignResourceInfo assign_resource = 1;
  if (has_assign_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assign_resource(), target);
  }
  
  // optional .alproto.ActualResourceInfo actual_resource = 2;
  if (has_actual_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actual_resource(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssignAndActualResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .alproto.AssignResourceInfo assign_resource = 1;
    if (has_assign_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assign_resource());
    }
    
    // optional .alproto.ActualResourceInfo actual_resource = 2;
    if (has_actual_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actual_resource());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssignAndActualResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssignAndActualResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssignAndActualResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssignAndActualResourceInfo::MergeFrom(const AssignAndActualResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assign_resource()) {
      mutable_assign_resource()->::alproto::AssignResourceInfo::MergeFrom(from.assign_resource());
    }
    if (from.has_actual_resource()) {
      mutable_actual_resource()->::alproto::ActualResourceInfo::MergeFrom(from.actual_resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssignAndActualResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignAndActualResourceInfo::CopyFrom(const AssignAndActualResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignAndActualResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_assign_resource()) {
    if (!this->assign_resource().IsInitialized()) return false;
  }
  if (has_actual_resource()) {
    if (!this->actual_resource().IsInitialized()) return false;
  }
  return true;
}

void AssignAndActualResourceInfo::Swap(AssignAndActualResourceInfo* other) {
  if (other != this) {
    std::swap(assign_resource_, other->assign_resource_);
    std::swap(actual_resource_, other->actual_resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssignAndActualResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssignAndActualResourceInfo_descriptor_;
  metadata.reflection = AssignAndActualResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlatformAndMachineResouceInfo::kPlatformResourceFieldNumber;
const int PlatformAndMachineResouceInfo::kMachineResourceFieldNumber;
#endif  // !_MSC_VER

PlatformAndMachineResouceInfo::PlatformAndMachineResouceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlatformAndMachineResouceInfo::InitAsDefaultInstance() {
  platform_resource_ = const_cast< ::alproto::AssignAndActualResourceInfo*>(&::alproto::AssignAndActualResourceInfo::default_instance());
}

PlatformAndMachineResouceInfo::PlatformAndMachineResouceInfo(const PlatformAndMachineResouceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlatformAndMachineResouceInfo::SharedCtor() {
  _cached_size_ = 0;
  platform_resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlatformAndMachineResouceInfo::~PlatformAndMachineResouceInfo() {
  SharedDtor();
}

void PlatformAndMachineResouceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete platform_resource_;
  }
}

void PlatformAndMachineResouceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlatformAndMachineResouceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlatformAndMachineResouceInfo_descriptor_;
}

const PlatformAndMachineResouceInfo& PlatformAndMachineResouceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

PlatformAndMachineResouceInfo* PlatformAndMachineResouceInfo::default_instance_ = NULL;

PlatformAndMachineResouceInfo* PlatformAndMachineResouceInfo::New() const {
  return new PlatformAndMachineResouceInfo;
}

void PlatformAndMachineResouceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_platform_resource()) {
      if (platform_resource_ != NULL) platform_resource_->::alproto::AssignAndActualResourceInfo::Clear();
    }
  }
  machine_resource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlatformAndMachineResouceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .alproto.AssignAndActualResourceInfo platform_resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_platform_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_resource;
        break;
      }
      
      // repeated .alproto.AssignAndActualResourceInfo machine_resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machine_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_resource;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlatformAndMachineResouceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .alproto.AssignAndActualResourceInfo platform_resource = 1;
  if (has_platform_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->platform_resource(), output);
  }
  
  // repeated .alproto.AssignAndActualResourceInfo machine_resource = 2;
  for (int i = 0; i < this->machine_resource_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->machine_resource(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlatformAndMachineResouceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .alproto.AssignAndActualResourceInfo platform_resource = 1;
  if (has_platform_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->platform_resource(), target);
  }
  
  // repeated .alproto.AssignAndActualResourceInfo machine_resource = 2;
  for (int i = 0; i < this->machine_resource_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->machine_resource(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlatformAndMachineResouceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .alproto.AssignAndActualResourceInfo platform_resource = 1;
    if (has_platform_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->platform_resource());
    }
    
  }
  // repeated .alproto.AssignAndActualResourceInfo machine_resource = 2;
  total_size += 1 * this->machine_resource_size();
  for (int i = 0; i < this->machine_resource_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machine_resource(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlatformAndMachineResouceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlatformAndMachineResouceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlatformAndMachineResouceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlatformAndMachineResouceInfo::MergeFrom(const PlatformAndMachineResouceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  machine_resource_.MergeFrom(from.machine_resource_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform_resource()) {
      mutable_platform_resource()->::alproto::AssignAndActualResourceInfo::MergeFrom(from.platform_resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlatformAndMachineResouceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlatformAndMachineResouceInfo::CopyFrom(const PlatformAndMachineResouceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatformAndMachineResouceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_platform_resource()) {
    if (!this->platform_resource().IsInitialized()) return false;
  }
  for (int i = 0; i < machine_resource_size(); i++) {
    if (!this->machine_resource(i).IsInitialized()) return false;
  }
  return true;
}

void PlatformAndMachineResouceInfo::Swap(PlatformAndMachineResouceInfo* other) {
  if (other != this) {
    std::swap(platform_resource_, other->platform_resource_);
    machine_resource_.Swap(&other->machine_resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlatformAndMachineResouceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlatformAndMachineResouceInfo_descriptor_;
  metadata.reflection = PlatformAndMachineResouceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyAndUseResourceInfo::kApplyResourceFieldNumber;
const int ApplyAndUseResourceInfo::kUseResourceFieldNumber;
#endif  // !_MSC_VER

ApplyAndUseResourceInfo::ApplyAndUseResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyAndUseResourceInfo::InitAsDefaultInstance() {
  apply_resource_ = const_cast< ::alproto::ResourceInfo*>(&::alproto::ResourceInfo::default_instance());
  use_resource_ = const_cast< ::alproto::ResourceInfo*>(&::alproto::ResourceInfo::default_instance());
}

ApplyAndUseResourceInfo::ApplyAndUseResourceInfo(const ApplyAndUseResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyAndUseResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  apply_resource_ = NULL;
  use_resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyAndUseResourceInfo::~ApplyAndUseResourceInfo() {
  SharedDtor();
}

void ApplyAndUseResourceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete apply_resource_;
    delete use_resource_;
  }
}

void ApplyAndUseResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyAndUseResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyAndUseResourceInfo_descriptor_;
}

const ApplyAndUseResourceInfo& ApplyAndUseResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

ApplyAndUseResourceInfo* ApplyAndUseResourceInfo::default_instance_ = NULL;

ApplyAndUseResourceInfo* ApplyAndUseResourceInfo::New() const {
  return new ApplyAndUseResourceInfo;
}

void ApplyAndUseResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_apply_resource()) {
      if (apply_resource_ != NULL) apply_resource_->::alproto::ResourceInfo::Clear();
    }
    if (has_use_resource()) {
      if (use_resource_ != NULL) use_resource_->::alproto::ResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyAndUseResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .alproto.ResourceInfo apply_resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_use_resource;
        break;
      }
      
      // optional .alproto.ResourceInfo use_resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_use_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_use_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyAndUseResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .alproto.ResourceInfo apply_resource = 1;
  if (has_apply_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->apply_resource(), output);
  }
  
  // optional .alproto.ResourceInfo use_resource = 2;
  if (has_use_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->use_resource(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyAndUseResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .alproto.ResourceInfo apply_resource = 1;
  if (has_apply_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->apply_resource(), target);
  }
  
  // optional .alproto.ResourceInfo use_resource = 2;
  if (has_use_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->use_resource(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyAndUseResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .alproto.ResourceInfo apply_resource = 1;
    if (has_apply_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply_resource());
    }
    
    // optional .alproto.ResourceInfo use_resource = 2;
    if (has_use_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->use_resource());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyAndUseResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyAndUseResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyAndUseResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyAndUseResourceInfo::MergeFrom(const ApplyAndUseResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_resource()) {
      mutable_apply_resource()->::alproto::ResourceInfo::MergeFrom(from.apply_resource());
    }
    if (from.has_use_resource()) {
      mutable_use_resource()->::alproto::ResourceInfo::MergeFrom(from.use_resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyAndUseResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyAndUseResourceInfo::CopyFrom(const ApplyAndUseResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyAndUseResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_apply_resource()) {
    if (!this->apply_resource().IsInitialized()) return false;
  }
  if (has_use_resource()) {
    if (!this->use_resource().IsInitialized()) return false;
  }
  return true;
}

void ApplyAndUseResourceInfo::Swap(ApplyAndUseResourceInfo* other) {
  if (other != this) {
    std::swap(apply_resource_, other->apply_resource_);
    std::swap(use_resource_, other->use_resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyAndUseResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyAndUseResourceInfo_descriptor_;
  metadata.reflection = ApplyAndUseResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MachineInstanceResourceInfo::kNcIpFieldNumber;
const int MachineInstanceResourceInfo::kMachineApplyUseResourceFieldNumber;
#endif  // !_MSC_VER

MachineInstanceResourceInfo::MachineInstanceResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineInstanceResourceInfo::InitAsDefaultInstance() {
  machine_apply_use_resource_ = const_cast< ::alproto::ApplyAndUseResourceInfo*>(&::alproto::ApplyAndUseResourceInfo::default_instance());
}

MachineInstanceResourceInfo::MachineInstanceResourceInfo(const MachineInstanceResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineInstanceResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  nc_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_apply_use_resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineInstanceResourceInfo::~MachineInstanceResourceInfo() {
  SharedDtor();
}

void MachineInstanceResourceInfo::SharedDtor() {
  if (nc_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete nc_ip_;
  }
  if (this != default_instance_) {
    delete machine_apply_use_resource_;
  }
}

void MachineInstanceResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineInstanceResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineInstanceResourceInfo_descriptor_;
}

const MachineInstanceResourceInfo& MachineInstanceResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

MachineInstanceResourceInfo* MachineInstanceResourceInfo::default_instance_ = NULL;

MachineInstanceResourceInfo* MachineInstanceResourceInfo::New() const {
  return new MachineInstanceResourceInfo;
}

void MachineInstanceResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nc_ip()) {
      if (nc_ip_ != &::google::protobuf::internal::kEmptyString) {
        nc_ip_->clear();
      }
    }
    if (has_machine_apply_use_resource()) {
      if (machine_apply_use_resource_ != NULL) machine_apply_use_resource_->::alproto::ApplyAndUseResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineInstanceResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nc_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nc_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nc_ip().data(), this->nc_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_apply_use_resource;
        break;
      }
      
      // optional .alproto.ApplyAndUseResourceInfo machine_apply_use_resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_apply_use_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine_apply_use_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineInstanceResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nc_ip = 1;
  if (has_nc_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nc_ip().data(), this->nc_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nc_ip(), output);
  }
  
  // optional .alproto.ApplyAndUseResourceInfo machine_apply_use_resource = 2;
  if (has_machine_apply_use_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->machine_apply_use_resource(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineInstanceResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nc_ip = 1;
  if (has_nc_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nc_ip().data(), this->nc_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nc_ip(), target);
  }
  
  // optional .alproto.ApplyAndUseResourceInfo machine_apply_use_resource = 2;
  if (has_machine_apply_use_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->machine_apply_use_resource(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineInstanceResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nc_ip = 1;
    if (has_nc_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nc_ip());
    }
    
    // optional .alproto.ApplyAndUseResourceInfo machine_apply_use_resource = 2;
    if (has_machine_apply_use_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine_apply_use_resource());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineInstanceResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineInstanceResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineInstanceResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineInstanceResourceInfo::MergeFrom(const MachineInstanceResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nc_ip()) {
      set_nc_ip(from.nc_ip());
    }
    if (from.has_machine_apply_use_resource()) {
      mutable_machine_apply_use_resource()->::alproto::ApplyAndUseResourceInfo::MergeFrom(from.machine_apply_use_resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineInstanceResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineInstanceResourceInfo::CopyFrom(const MachineInstanceResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineInstanceResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_machine_apply_use_resource()) {
    if (!this->machine_apply_use_resource().IsInitialized()) return false;
  }
  return true;
}

void MachineInstanceResourceInfo::Swap(MachineInstanceResourceInfo* other) {
  if (other != this) {
    std::swap(nc_ip_, other->nc_ip_);
    std::swap(machine_apply_use_resource_, other->machine_apply_use_resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineInstanceResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineInstanceResourceInfo_descriptor_;
  metadata.reflection = MachineInstanceResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceMachineResourceInfo::kFrameworkIdFieldNumber;
const int InstanceMachineResourceInfo::kInstanceApplyUseResourceFieldNumber;
#endif  // !_MSC_VER

InstanceMachineResourceInfo::InstanceMachineResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceMachineResourceInfo::InitAsDefaultInstance() {
  instance_apply_use_resource_ = const_cast< ::alproto::ApplyAndUseResourceInfo*>(&::alproto::ApplyAndUseResourceInfo::default_instance());
}

InstanceMachineResourceInfo::InstanceMachineResourceInfo(const InstanceMachineResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceMachineResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_id_ = 0u;
  instance_apply_use_resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceMachineResourceInfo::~InstanceMachineResourceInfo() {
  SharedDtor();
}

void InstanceMachineResourceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete instance_apply_use_resource_;
  }
}

void InstanceMachineResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceMachineResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceMachineResourceInfo_descriptor_;
}

const InstanceMachineResourceInfo& InstanceMachineResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

InstanceMachineResourceInfo* InstanceMachineResourceInfo::default_instance_ = NULL;

InstanceMachineResourceInfo* InstanceMachineResourceInfo::New() const {
  return new InstanceMachineResourceInfo;
}

void InstanceMachineResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framework_id_ = 0u;
    if (has_instance_apply_use_resource()) {
      if (instance_apply_use_resource_ != NULL) instance_apply_use_resource_->::alproto::ApplyAndUseResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceMachineResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framework_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_id_)));
          set_has_framework_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_apply_use_resource;
        break;
      }
      
      // optional .alproto.ApplyAndUseResourceInfo instance_apply_use_resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_apply_use_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_apply_use_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceMachineResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framework_id(), output);
  }
  
  // optional .alproto.ApplyAndUseResourceInfo instance_apply_use_resource = 2;
  if (has_instance_apply_use_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instance_apply_use_resource(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceMachineResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framework_id(), target);
  }
  
  // optional .alproto.ApplyAndUseResourceInfo instance_apply_use_resource = 2;
  if (has_instance_apply_use_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instance_apply_use_resource(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceMachineResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 framework_id = 1;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_id());
    }
    
    // optional .alproto.ApplyAndUseResourceInfo instance_apply_use_resource = 2;
    if (has_instance_apply_use_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_apply_use_resource());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceMachineResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceMachineResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceMachineResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceMachineResourceInfo::MergeFrom(const InstanceMachineResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_id()) {
      set_framework_id(from.framework_id());
    }
    if (from.has_instance_apply_use_resource()) {
      mutable_instance_apply_use_resource()->::alproto::ApplyAndUseResourceInfo::MergeFrom(from.instance_apply_use_resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceMachineResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceMachineResourceInfo::CopyFrom(const InstanceMachineResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceMachineResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_instance_apply_use_resource()) {
    if (!this->instance_apply_use_resource().IsInitialized()) return false;
  }
  return true;
}

void InstanceMachineResourceInfo::Swap(InstanceMachineResourceInfo* other) {
  if (other != this) {
    std::swap(framework_id_, other->framework_id_);
    std::swap(instance_apply_use_resource_, other->instance_apply_use_resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceMachineResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceMachineResourceInfo_descriptor_;
  metadata.reflection = InstanceMachineResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameworkInstanceResourceInfo::kInstanceTotalApplyUseResourceFieldNumber;
const int FrameworkInstanceResourceInfo::kInstanceAtMachineResourceFieldNumber;
const int FrameworkInstanceResourceInfo::kMachineHasInstanceResourceFieldNumber;
#endif  // !_MSC_VER

FrameworkInstanceResourceInfo::FrameworkInstanceResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkInstanceResourceInfo::InitAsDefaultInstance() {
  instance_total_apply_use_resource_ = const_cast< ::alproto::ApplyAndUseResourceInfo*>(&::alproto::ApplyAndUseResourceInfo::default_instance());
}

FrameworkInstanceResourceInfo::FrameworkInstanceResourceInfo(const FrameworkInstanceResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkInstanceResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  instance_total_apply_use_resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkInstanceResourceInfo::~FrameworkInstanceResourceInfo() {
  SharedDtor();
}

void FrameworkInstanceResourceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete instance_total_apply_use_resource_;
  }
}

void FrameworkInstanceResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkInstanceResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkInstanceResourceInfo_descriptor_;
}

const FrameworkInstanceResourceInfo& FrameworkInstanceResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

FrameworkInstanceResourceInfo* FrameworkInstanceResourceInfo::default_instance_ = NULL;

FrameworkInstanceResourceInfo* FrameworkInstanceResourceInfo::New() const {
  return new FrameworkInstanceResourceInfo;
}

void FrameworkInstanceResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instance_total_apply_use_resource()) {
      if (instance_total_apply_use_resource_ != NULL) instance_total_apply_use_resource_->::alproto::ApplyAndUseResourceInfo::Clear();
    }
  }
  instance_at_machine_resource_.Clear();
  machine_has_instance_resource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkInstanceResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .alproto.ApplyAndUseResourceInfo instance_total_apply_use_resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_total_apply_use_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_at_machine_resource;
        break;
      }
      
      // repeated .alproto.MachineInstanceResourceInfo instance_at_machine_resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_at_machine_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instance_at_machine_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_at_machine_resource;
        if (input->ExpectTag(26)) goto parse_machine_has_instance_resource;
        break;
      }
      
      // repeated .alproto.InstanceMachineResourceInfo machine_has_instance_resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_has_instance_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machine_has_instance_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_machine_has_instance_resource;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkInstanceResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .alproto.ApplyAndUseResourceInfo instance_total_apply_use_resource = 1;
  if (has_instance_total_apply_use_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instance_total_apply_use_resource(), output);
  }
  
  // repeated .alproto.MachineInstanceResourceInfo instance_at_machine_resource = 2;
  for (int i = 0; i < this->instance_at_machine_resource_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instance_at_machine_resource(i), output);
  }
  
  // repeated .alproto.InstanceMachineResourceInfo machine_has_instance_resource = 3;
  for (int i = 0; i < this->machine_has_instance_resource_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->machine_has_instance_resource(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkInstanceResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .alproto.ApplyAndUseResourceInfo instance_total_apply_use_resource = 1;
  if (has_instance_total_apply_use_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instance_total_apply_use_resource(), target);
  }
  
  // repeated .alproto.MachineInstanceResourceInfo instance_at_machine_resource = 2;
  for (int i = 0; i < this->instance_at_machine_resource_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instance_at_machine_resource(i), target);
  }
  
  // repeated .alproto.InstanceMachineResourceInfo machine_has_instance_resource = 3;
  for (int i = 0; i < this->machine_has_instance_resource_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->machine_has_instance_resource(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkInstanceResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .alproto.ApplyAndUseResourceInfo instance_total_apply_use_resource = 1;
    if (has_instance_total_apply_use_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_total_apply_use_resource());
    }
    
  }
  // repeated .alproto.MachineInstanceResourceInfo instance_at_machine_resource = 2;
  total_size += 1 * this->instance_at_machine_resource_size();
  for (int i = 0; i < this->instance_at_machine_resource_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instance_at_machine_resource(i));
  }
  
  // repeated .alproto.InstanceMachineResourceInfo machine_has_instance_resource = 3;
  total_size += 1 * this->machine_has_instance_resource_size();
  for (int i = 0; i < this->machine_has_instance_resource_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machine_has_instance_resource(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkInstanceResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkInstanceResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkInstanceResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkInstanceResourceInfo::MergeFrom(const FrameworkInstanceResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  instance_at_machine_resource_.MergeFrom(from.instance_at_machine_resource_);
  machine_has_instance_resource_.MergeFrom(from.machine_has_instance_resource_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_total_apply_use_resource()) {
      mutable_instance_total_apply_use_resource()->::alproto::ApplyAndUseResourceInfo::MergeFrom(from.instance_total_apply_use_resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkInstanceResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkInstanceResourceInfo::CopyFrom(const FrameworkInstanceResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkInstanceResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_instance_total_apply_use_resource()) {
    if (!this->instance_total_apply_use_resource().IsInitialized()) return false;
  }
  for (int i = 0; i < instance_at_machine_resource_size(); i++) {
    if (!this->instance_at_machine_resource(i).IsInitialized()) return false;
  }
  for (int i = 0; i < machine_has_instance_resource_size(); i++) {
    if (!this->machine_has_instance_resource(i).IsInitialized()) return false;
  }
  return true;
}

void FrameworkInstanceResourceInfo::Swap(FrameworkInstanceResourceInfo* other) {
  if (other != this) {
    std::swap(instance_total_apply_use_resource_, other->instance_total_apply_use_resource_);
    instance_at_machine_resource_.Swap(&other->instance_at_machine_resource_);
    machine_has_instance_resource_.Swap(&other->machine_has_instance_resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkInstanceResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkInstanceResourceInfo_descriptor_;
  metadata.reflection = FrameworkInstanceResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetworkAddress::kNodeIpFieldNumber;
const int NetworkAddress::kNodePortFieldNumber;
#endif  // !_MSC_VER

NetworkAddress::NetworkAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetworkAddress::InitAsDefaultInstance() {
}

NetworkAddress::NetworkAddress(const NetworkAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkAddress::SharedCtor() {
  _cached_size_ = 0;
  node_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  node_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkAddress::~NetworkAddress() {
  SharedDtor();
}

void NetworkAddress::SharedDtor() {
  if (node_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete node_ip_;
  }
  if (this != default_instance_) {
  }
}

void NetworkAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkAddress_descriptor_;
}

const NetworkAddress& NetworkAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ALProtocol_2eproto();  return *default_instance_;
}

NetworkAddress* NetworkAddress::default_instance_ = NULL;

NetworkAddress* NetworkAddress::New() const {
  return new NetworkAddress;
}

void NetworkAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_ip()) {
      if (node_ip_ != &::google::protobuf::internal::kEmptyString) {
        node_ip_->clear();
      }
    }
    node_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_ip().data(), this->node_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_port;
        break;
      }
      
      // optional uint32 node_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_port_)));
          set_has_node_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_ip = 1;
  if (has_node_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_ip().data(), this->node_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_ip(), output);
  }
  
  // optional uint32 node_port = 2;
  if (has_node_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetworkAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_ip = 1;
  if (has_node_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_ip().data(), this->node_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_ip(), target);
  }
  
  // optional uint32 node_port = 2;
  if (has_node_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetworkAddress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_ip = 1;
    if (has_node_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_ip());
    }
    
    // optional uint32 node_port = 2;
    if (has_node_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkAddress::MergeFrom(const NetworkAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_ip()) {
      set_node_ip(from.node_ip());
    }
    if (from.has_node_port()) {
      set_node_port(from.node_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkAddress::CopyFrom(const NetworkAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NetworkAddress::Swap(NetworkAddress* other) {
  if (other != this) {
    std::swap(node_ip_, other->node_ip_);
    std::swap(node_port_, other->node_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkAddress_descriptor_;
  metadata.reflection = NetworkAddress_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace alproto

// @@protoc_insertion_point(global_scope)
