// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FwmRcProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FwmRcProto {

namespace {

const ::google::protobuf::Descriptor* GpuResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GpuResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameworkInstanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkInstanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddressResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddressResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FWMasterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FWMasterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FWMRCRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FWMRCRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* FWMRCRegisterACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FWMRCRegisterACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* EachMachineResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EachMachineResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSlaveResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSlaveResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* EachNCResourceAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EachNCResourceAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespondRequestSlaveResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespondRequestSlaveResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* EachSlaveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EachSlaveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuccessSlaveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuccessSlaveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTaskResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTaskResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespondRequestTaskResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespondRequestTaskResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnTaskResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnTaskResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPProcessInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPProcessInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopModuleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopModuleInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FwmRcProtocol_2eproto() {
  protobuf_AddDesc_FwmRcProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FwmRcProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  GpuResourceInfo_descriptor_ = file->message_type(0);
  static const int GpuResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, gpu_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, gpu_mem_size_),
  };
  GpuResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GpuResourceInfo_descriptor_,
      GpuResourceInfo::default_instance_,
      GpuResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GpuResourceInfo));
  ResourceInfo_descriptor_ = file->message_type(1);
  static const int ResourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, cpu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, cpu_mem_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, gpu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, gpu_resource_info_),
  };
  ResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceInfo_descriptor_,
      ResourceInfo::default_instance_,
      ResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceInfo));
  FrameworkInstanceInfo_descriptor_ = file->message_type(2);
  static const int FrameworkInstanceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, framework_instance_id_),
  };
  FrameworkInstanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkInstanceInfo_descriptor_,
      FrameworkInstanceInfo::default_instance_,
      FrameworkInstanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkInstanceInfo));
  NetAddress_descriptor_ = file->message_type(3);
  static const int NetAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetAddress, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetAddress, port_),
  };
  NetAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetAddress_descriptor_,
      NetAddress::default_instance_,
      NetAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetAddress));
  AddressResourceInfo_descriptor_ = file->message_type(4);
  static const int AddressResourceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressResourceInfo, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressResourceInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressResourceInfo, resource_info_),
  };
  AddressResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddressResourceInfo_descriptor_,
      AddressResourceInfo::default_instance_,
      AddressResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddressResourceInfo));
  FWMasterInfo_descriptor_ = file->message_type(5);
  static const int FWMasterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FWMasterInfo, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FWMasterInfo, fw_master_ip_),
  };
  FWMasterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FWMasterInfo_descriptor_,
      FWMasterInfo::default_instance_,
      FWMasterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FWMasterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FWMasterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FWMasterInfo));
  FWMRCRegister_descriptor_ = file->message_type(6);
  static const int FWMRCRegister_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FWMRCRegister, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FWMRCRegister, framework_master_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FWMRCRegister, data_search_entry_),
  };
  FWMRCRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FWMRCRegister_descriptor_,
      FWMRCRegister::default_instance_,
      FWMRCRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FWMRCRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FWMRCRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FWMRCRegister));
  FWMRCRegisterACK_descriptor_ = file->message_type(7);
  static const int FWMRCRegisterACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FWMRCRegisterACK, statuscode_),
  };
  FWMRCRegisterACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FWMRCRegisterACK_descriptor_,
      FWMRCRegisterACK::default_instance_,
      FWMRCRegisterACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FWMRCRegisterACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FWMRCRegisterACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FWMRCRegisterACK));
  EachMachineResourceInfo_descriptor_ = file->message_type(8);
  static const int EachMachineResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachMachineResourceInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachMachineResourceInfo, resource_info_),
  };
  EachMachineResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EachMachineResourceInfo_descriptor_,
      EachMachineResourceInfo::default_instance_,
      EachMachineResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachMachineResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachMachineResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EachMachineResourceInfo));
  RequestSlaveResource_descriptor_ = file->message_type(9);
  static const int RequestSlaveResource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSlaveResource, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSlaveResource, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSlaveResource, each_resource_info_),
  };
  RequestSlaveResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSlaveResource_descriptor_,
      RequestSlaveResource::default_instance_,
      RequestSlaveResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSlaveResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSlaveResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSlaveResource));
  EachNCResourceAddress_descriptor_ = file->message_type(10);
  static const int EachNCResourceAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachNCResourceAddress, nc_net_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachNCResourceAddress, resource_info_),
  };
  EachNCResourceAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EachNCResourceAddress_descriptor_,
      EachNCResourceAddress::default_instance_,
      EachNCResourceAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachNCResourceAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachNCResourceAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EachNCResourceAddress));
  RespondRequestSlaveResource_descriptor_ = file->message_type(11);
  static const int RespondRequestSlaveResource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondRequestSlaveResource, address_resource_info_),
  };
  RespondRequestSlaveResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespondRequestSlaveResource_descriptor_,
      RespondRequestSlaveResource::default_instance_,
      RespondRequestSlaveResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondRequestSlaveResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondRequestSlaveResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespondRequestSlaveResource));
  EachSlaveInfo_descriptor_ = file->message_type(12);
  static const int EachSlaveInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachSlaveInfo, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachSlaveInfo, framework_slave_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachSlaveInfo, framework_slave_pid_),
  };
  EachSlaveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EachSlaveInfo_descriptor_,
      EachSlaveInfo::default_instance_,
      EachSlaveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachSlaveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachSlaveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EachSlaveInfo));
  SuccessSlaveInfo_descriptor_ = file->message_type(13);
  static const int SuccessSlaveInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuccessSlaveInfo, success_slave_info_),
  };
  SuccessSlaveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuccessSlaveInfo_descriptor_,
      SuccessSlaveInfo::default_instance_,
      SuccessSlaveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuccessSlaveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuccessSlaveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuccessSlaveInfo));
  RequestTaskResource_descriptor_ = file->message_type(14);
  static const int RequestTaskResource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTaskResource, task_resource_info_),
  };
  RequestTaskResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTaskResource_descriptor_,
      RequestTaskResource::default_instance_,
      RequestTaskResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTaskResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTaskResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTaskResource));
  ResourceAddress_descriptor_ = file->message_type(15);
  static const int ResourceAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceAddress, nc_net_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceAddress, framework_instance_info_),
  };
  ResourceAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceAddress_descriptor_,
      ResourceAddress::default_instance_,
      ResourceAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceAddress));
  RespondRequestTaskResource_descriptor_ = file->message_type(16);
  static const int RespondRequestTaskResource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondRequestTaskResource, resource_address_),
  };
  RespondRequestTaskResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespondRequestTaskResource_descriptor_,
      RespondRequestTaskResource::default_instance_,
      RespondRequestTaskResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondRequestTaskResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondRequestTaskResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespondRequestTaskResource));
  ReturnTaskResource_descriptor_ = file->message_type(17);
  static const int ReturnTaskResource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTaskResource, task_resource_info_),
  };
  ReturnTaskResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnTaskResource_descriptor_,
      ReturnTaskResource::default_instance_,
      ReturnTaskResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTaskResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTaskResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnTaskResource));
  IPProcessInfo_descriptor_ = file->message_type(18);
  static const int IPProcessInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPProcessInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPProcessInfo, process_id_),
  };
  IPProcessInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPProcessInfo_descriptor_,
      IPProcessInfo::default_instance_,
      IPProcessInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPProcessInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPProcessInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPProcessInfo));
  StopModuleInfo_descriptor_ = file->message_type(19);
  static const int StopModuleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModuleInfo, framework_instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModuleInfo, ip_process_),
  };
  StopModuleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopModuleInfo_descriptor_,
      StopModuleInfo::default_instance_,
      StopModuleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModuleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModuleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopModuleInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FwmRcProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpuResourceInfo_descriptor_, &GpuResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceInfo_descriptor_, &ResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkInstanceInfo_descriptor_, &FrameworkInstanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetAddress_descriptor_, &NetAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressResourceInfo_descriptor_, &AddressResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FWMasterInfo_descriptor_, &FWMasterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FWMRCRegister_descriptor_, &FWMRCRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FWMRCRegisterACK_descriptor_, &FWMRCRegisterACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EachMachineResourceInfo_descriptor_, &EachMachineResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSlaveResource_descriptor_, &RequestSlaveResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EachNCResourceAddress_descriptor_, &EachNCResourceAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespondRequestSlaveResource_descriptor_, &RespondRequestSlaveResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EachSlaveInfo_descriptor_, &EachSlaveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuccessSlaveInfo_descriptor_, &SuccessSlaveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTaskResource_descriptor_, &RequestTaskResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceAddress_descriptor_, &ResourceAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespondRequestTaskResource_descriptor_, &RespondRequestTaskResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnTaskResource_descriptor_, &ReturnTaskResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPProcessInfo_descriptor_, &IPProcessInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopModuleInfo_descriptor_, &StopModuleInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FwmRcProtocol_2eproto() {
  delete GpuResourceInfo::default_instance_;
  delete GpuResourceInfo_reflection_;
  delete ResourceInfo::default_instance_;
  delete ResourceInfo_reflection_;
  delete FrameworkInstanceInfo::default_instance_;
  delete FrameworkInstanceInfo_reflection_;
  delete NetAddress::default_instance_;
  delete NetAddress_reflection_;
  delete AddressResourceInfo::default_instance_;
  delete AddressResourceInfo_reflection_;
  delete FWMasterInfo::default_instance_;
  delete FWMasterInfo_reflection_;
  delete FWMRCRegister::default_instance_;
  delete FWMRCRegister_reflection_;
  delete FWMRCRegisterACK::default_instance_;
  delete FWMRCRegisterACK_reflection_;
  delete EachMachineResourceInfo::default_instance_;
  delete EachMachineResourceInfo_reflection_;
  delete RequestSlaveResource::default_instance_;
  delete RequestSlaveResource_reflection_;
  delete EachNCResourceAddress::default_instance_;
  delete EachNCResourceAddress_reflection_;
  delete RespondRequestSlaveResource::default_instance_;
  delete RespondRequestSlaveResource_reflection_;
  delete EachSlaveInfo::default_instance_;
  delete EachSlaveInfo_reflection_;
  delete SuccessSlaveInfo::default_instance_;
  delete SuccessSlaveInfo_reflection_;
  delete RequestTaskResource::default_instance_;
  delete RequestTaskResource_reflection_;
  delete ResourceAddress::default_instance_;
  delete ResourceAddress_reflection_;
  delete RespondRequestTaskResource::default_instance_;
  delete RespondRequestTaskResource_reflection_;
  delete ReturnTaskResource::default_instance_;
  delete ReturnTaskResource_reflection_;
  delete IPProcessInfo::default_instance_;
  delete IPProcessInfo_reflection_;
  delete StopModuleInfo::default_instance_;
  delete StopModuleInfo_reflection_;
}

void protobuf_AddDesc_FwmRcProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023FwmRcProtocol.proto\022\nFwmRcProto\"9\n\017Gpu"
    "ResourceInfo\022\020\n\010gpu_name\030\001 \002(\t\022\024\n\014gpu_me"
    "m_size\030\002 \001(\r\"~\n\014ResourceInfo\022\017\n\007cpu_num\030"
    "\001 \002(\001\022\024\n\014cpu_mem_size\030\002 \002(\r\022\017\n\007gpu_num\030\003"
    " \001(\r\0226\n\021gpu_resource_info\030\004 \003(\0132\033.FwmRcP"
    "roto.GpuResourceInfo\"L\n\025FrameworkInstanc"
    "eInfo\022\024\n\014framework_id\030\001 \002(\r\022\035\n\025framework"
    "_instance_id\030\002 \002(\r\"&\n\nNetAddress\022\n\n\002ip\030\001"
    " \002(\t\022\014\n\004port\030\002 \001(\r\"\226\001\n\023AddressResourceIn"
    "fo\022B\n\027framework_instance_info\030\001 \002(\0132!.Fw"
    "mRcProto.FrameworkInstanceInfo\022\n\n\002ip\030\002 \001"
    "(\t\022/\n\rresource_info\030\003 \001(\0132\030.FwmRcProto.R"
    "esourceInfo\"9\n\014FWMasterInfo\022\023\n\013module_na"
    "me\030\001 \002(\t\022\024\n\014FW_master_ip\030\002 \001(\t\"\277\001\n\rFWMRC"
    "Register\022B\n\027framework_instance_info\030\001 \002("
    "\0132!.FwmRcProto.FrameworkInstanceInfo\0227\n\025"
    "framework_master_info\030\002 \001(\0132\030.FwmRcProto"
    ".FWMasterInfo\0221\n\021data_search_entry\030\003 \001(\013"
    "2\026.FwmRcProto.NetAddress\"&\n\020FWMRCRegiste"
    "rACK\022\022\n\nstatuscode\030\001 \002(\005\"V\n\027EachMachineR"
    "esourceInfo\022\n\n\002ip\030\001 \002(\t\022/\n\rresource_info"
    "\030\002 \001(\0132\030.FwmRcProto.ResourceInfo\"\260\001\n\024Req"
    "uestSlaveResource\022B\n\027framework_instance_"
    "info\030\001 \002(\0132!.FwmRcProto.FrameworkInstanc"
    "eInfo\022\023\n\013module_name\030\002 \001(\t\022\?\n\022each_resou"
    "rce_info\030\003 \003(\0132#.FwmRcProto.EachMachineR"
    "esourceInfo\"x\n\025EachNCResourceAddress\022.\n\016"
    "NC_net_address\030\001 \002(\0132\026.FwmRcProto.NetAdd"
    "ress\022/\n\rresource_info\030\002 \001(\0132\030.FwmRcProto"
    ".ResourceInfo\"_\n\033RespondRequestSlaveReso"
    "urce\022@\n\025address_resource_info\030\001 \003(\0132!.Fw"
    "mRcProto.EachNCResourceAddress\"\214\001\n\rEachS"
    "laveInfo\022B\n\027framework_instance_info\030\001 \002("
    "\0132!.FwmRcProto.FrameworkInstanceInfo\022\032\n\022"
    "framework_slave_ip\030\002 \001(\t\022\033\n\023framework_sl"
    "ave_PID\030\003 \001(\r\"I\n\020SuccessSlaveInfo\0225\n\022suc"
    "cess_slave_info\030\001 \003(\0132\031.FwmRcProto.EachS"
    "laveInfo\"R\n\023RequestTaskResource\022;\n\022task_"
    "resource_info\030\001 \003(\0132\037.FwmRcProto.Address"
    "ResourceInfo\"\205\001\n\017ResourceAddress\022.\n\016NC_n"
    "et_address\030\001 \002(\0132\026.FwmRcProto.NetAddress"
    "\022B\n\027framework_instance_info\030\002 \001(\0132!.FwmR"
    "cProto.FrameworkInstanceInfo\"S\n\032RespondR"
    "equestTaskResource\0225\n\020resource_address\030\001"
    " \003(\0132\033.FwmRcProto.ResourceAddress\"Q\n\022Ret"
    "urnTaskResource\022;\n\022task_resource_info\030\001 "
    "\003(\0132\037.FwmRcProto.AddressResourceInfo\"/\n\r"
    "IPProcessInfo\022\n\n\002ip\030\001 \002(\t\022\022\n\nprocess_id\030"
    "\002 \001(\r\"~\n\016StopModuleInfo\022=\n\022framework_Ins"
    "tance\030\001 \002(\0132!.FwmRcProto.FrameworkInstan"
    "ceInfo\022-\n\nip_process\030\002 \003(\0132\031.FwmRcProto."
    "IPProcessInfo", 2053);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FwmRcProtocol.proto", &protobuf_RegisterTypes);
  GpuResourceInfo::default_instance_ = new GpuResourceInfo();
  ResourceInfo::default_instance_ = new ResourceInfo();
  FrameworkInstanceInfo::default_instance_ = new FrameworkInstanceInfo();
  NetAddress::default_instance_ = new NetAddress();
  AddressResourceInfo::default_instance_ = new AddressResourceInfo();
  FWMasterInfo::default_instance_ = new FWMasterInfo();
  FWMRCRegister::default_instance_ = new FWMRCRegister();
  FWMRCRegisterACK::default_instance_ = new FWMRCRegisterACK();
  EachMachineResourceInfo::default_instance_ = new EachMachineResourceInfo();
  RequestSlaveResource::default_instance_ = new RequestSlaveResource();
  EachNCResourceAddress::default_instance_ = new EachNCResourceAddress();
  RespondRequestSlaveResource::default_instance_ = new RespondRequestSlaveResource();
  EachSlaveInfo::default_instance_ = new EachSlaveInfo();
  SuccessSlaveInfo::default_instance_ = new SuccessSlaveInfo();
  RequestTaskResource::default_instance_ = new RequestTaskResource();
  ResourceAddress::default_instance_ = new ResourceAddress();
  RespondRequestTaskResource::default_instance_ = new RespondRequestTaskResource();
  ReturnTaskResource::default_instance_ = new ReturnTaskResource();
  IPProcessInfo::default_instance_ = new IPProcessInfo();
  StopModuleInfo::default_instance_ = new StopModuleInfo();
  GpuResourceInfo::default_instance_->InitAsDefaultInstance();
  ResourceInfo::default_instance_->InitAsDefaultInstance();
  FrameworkInstanceInfo::default_instance_->InitAsDefaultInstance();
  NetAddress::default_instance_->InitAsDefaultInstance();
  AddressResourceInfo::default_instance_->InitAsDefaultInstance();
  FWMasterInfo::default_instance_->InitAsDefaultInstance();
  FWMRCRegister::default_instance_->InitAsDefaultInstance();
  FWMRCRegisterACK::default_instance_->InitAsDefaultInstance();
  EachMachineResourceInfo::default_instance_->InitAsDefaultInstance();
  RequestSlaveResource::default_instance_->InitAsDefaultInstance();
  EachNCResourceAddress::default_instance_->InitAsDefaultInstance();
  RespondRequestSlaveResource::default_instance_->InitAsDefaultInstance();
  EachSlaveInfo::default_instance_->InitAsDefaultInstance();
  SuccessSlaveInfo::default_instance_->InitAsDefaultInstance();
  RequestTaskResource::default_instance_->InitAsDefaultInstance();
  ResourceAddress::default_instance_->InitAsDefaultInstance();
  RespondRequestTaskResource::default_instance_->InitAsDefaultInstance();
  ReturnTaskResource::default_instance_->InitAsDefaultInstance();
  IPProcessInfo::default_instance_->InitAsDefaultInstance();
  StopModuleInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FwmRcProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FwmRcProtocol_2eproto {
  StaticDescriptorInitializer_FwmRcProtocol_2eproto() {
    protobuf_AddDesc_FwmRcProtocol_2eproto();
  }
} static_descriptor_initializer_FwmRcProtocol_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GpuResourceInfo::kGpuNameFieldNumber;
const int GpuResourceInfo::kGpuMemSizeFieldNumber;
#endif  // !_MSC_VER

GpuResourceInfo::GpuResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GpuResourceInfo::InitAsDefaultInstance() {
}

GpuResourceInfo::GpuResourceInfo(const GpuResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GpuResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  gpu_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gpu_mem_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpuResourceInfo::~GpuResourceInfo() {
  SharedDtor();
}

void GpuResourceInfo::SharedDtor() {
  if (gpu_name_ != &::google::protobuf::internal::kEmptyString) {
    delete gpu_name_;
  }
  if (this != default_instance_) {
  }
}

void GpuResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpuResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpuResourceInfo_descriptor_;
}

const GpuResourceInfo& GpuResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

GpuResourceInfo* GpuResourceInfo::default_instance_ = NULL;

GpuResourceInfo* GpuResourceInfo::New() const {
  return new GpuResourceInfo;
}

void GpuResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gpu_name()) {
      if (gpu_name_ != &::google::protobuf::internal::kEmptyString) {
        gpu_name_->clear();
      }
    }
    gpu_mem_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpuResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gpu_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpu_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpu_name().data(), this->gpu_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gpu_mem_size;
        break;
      }
      
      // optional uint32 gpu_mem_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_mem_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpu_mem_size_)));
          set_has_gpu_mem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GpuResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string gpu_name = 1;
  if (has_gpu_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpu_name().data(), this->gpu_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gpu_name(), output);
  }
  
  // optional uint32 gpu_mem_size = 2;
  if (has_gpu_mem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gpu_mem_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GpuResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string gpu_name = 1;
  if (has_gpu_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpu_name().data(), this->gpu_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gpu_name(), target);
  }
  
  // optional uint32 gpu_mem_size = 2;
  if (has_gpu_mem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gpu_mem_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GpuResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gpu_name = 1;
    if (has_gpu_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpu_name());
    }
    
    // optional uint32 gpu_mem_size = 2;
    if (has_gpu_mem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpu_mem_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpuResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpuResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GpuResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpuResourceInfo::MergeFrom(const GpuResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gpu_name()) {
      set_gpu_name(from.gpu_name());
    }
    if (from.has_gpu_mem_size()) {
      set_gpu_mem_size(from.gpu_mem_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpuResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpuResourceInfo::CopyFrom(const GpuResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GpuResourceInfo::Swap(GpuResourceInfo* other) {
  if (other != this) {
    std::swap(gpu_name_, other->gpu_name_);
    std::swap(gpu_mem_size_, other->gpu_mem_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GpuResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GpuResourceInfo_descriptor_;
  metadata.reflection = GpuResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceInfo::kCpuNumFieldNumber;
const int ResourceInfo::kCpuMemSizeFieldNumber;
const int ResourceInfo::kGpuNumFieldNumber;
const int ResourceInfo::kGpuResourceInfoFieldNumber;
#endif  // !_MSC_VER

ResourceInfo::ResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceInfo::InitAsDefaultInstance() {
}

ResourceInfo::ResourceInfo(const ResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  cpu_num_ = 0;
  cpu_mem_size_ = 0u;
  gpu_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceInfo::~ResourceInfo() {
  SharedDtor();
}

void ResourceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceInfo_descriptor_;
}

const ResourceInfo& ResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

ResourceInfo* ResourceInfo::default_instance_ = NULL;

ResourceInfo* ResourceInfo::New() const {
  return new ResourceInfo;
}

void ResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cpu_num_ = 0;
    cpu_mem_size_ = 0u;
    gpu_num_ = 0u;
  }
  gpu_resource_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double cpu_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_num_)));
          set_has_cpu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cpu_mem_size;
        break;
      }
      
      // required uint32 cpu_mem_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_mem_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_mem_size_)));
          set_has_cpu_mem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gpu_num;
        break;
      }
      
      // optional uint32 gpu_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpu_num_)));
          set_has_gpu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gpu_resource_info;
        break;
      }
      
      // repeated .FwmRcProto.GpuResourceInfo gpu_resource_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpu_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gpu_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gpu_resource_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double cpu_num = 1;
  if (has_cpu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cpu_num(), output);
  }
  
  // required uint32 cpu_mem_size = 2;
  if (has_cpu_mem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cpu_mem_size(), output);
  }
  
  // optional uint32 gpu_num = 3;
  if (has_gpu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gpu_num(), output);
  }
  
  // repeated .FwmRcProto.GpuResourceInfo gpu_resource_info = 4;
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gpu_resource_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double cpu_num = 1;
  if (has_cpu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cpu_num(), target);
  }
  
  // required uint32 cpu_mem_size = 2;
  if (has_cpu_mem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cpu_mem_size(), target);
  }
  
  // optional uint32 gpu_num = 3;
  if (has_gpu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gpu_num(), target);
  }
  
  // repeated .FwmRcProto.GpuResourceInfo gpu_resource_info = 4;
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gpu_resource_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double cpu_num = 1;
    if (has_cpu_num()) {
      total_size += 1 + 8;
    }
    
    // required uint32 cpu_mem_size = 2;
    if (has_cpu_mem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_mem_size());
    }
    
    // optional uint32 gpu_num = 3;
    if (has_gpu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpu_num());
    }
    
  }
  // repeated .FwmRcProto.GpuResourceInfo gpu_resource_info = 4;
  total_size += 1 * this->gpu_resource_info_size();
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gpu_resource_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceInfo::MergeFrom(const ResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gpu_resource_info_.MergeFrom(from.gpu_resource_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_num()) {
      set_cpu_num(from.cpu_num());
    }
    if (from.has_cpu_mem_size()) {
      set_cpu_mem_size(from.cpu_mem_size());
    }
    if (from.has_gpu_num()) {
      set_gpu_num(from.gpu_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceInfo::CopyFrom(const ResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < gpu_resource_info_size(); i++) {
    if (!this->gpu_resource_info(i).IsInitialized()) return false;
  }
  return true;
}

void ResourceInfo::Swap(ResourceInfo* other) {
  if (other != this) {
    std::swap(cpu_num_, other->cpu_num_);
    std::swap(cpu_mem_size_, other->cpu_mem_size_);
    std::swap(gpu_num_, other->gpu_num_);
    gpu_resource_info_.Swap(&other->gpu_resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceInfo_descriptor_;
  metadata.reflection = ResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameworkInstanceInfo::kFrameworkIdFieldNumber;
const int FrameworkInstanceInfo::kFrameworkInstanceIdFieldNumber;
#endif  // !_MSC_VER

FrameworkInstanceInfo::FrameworkInstanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkInstanceInfo::InitAsDefaultInstance() {
}

FrameworkInstanceInfo::FrameworkInstanceInfo(const FrameworkInstanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkInstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_id_ = 0u;
  framework_instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkInstanceInfo::~FrameworkInstanceInfo() {
  SharedDtor();
}

void FrameworkInstanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameworkInstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkInstanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkInstanceInfo_descriptor_;
}

const FrameworkInstanceInfo& FrameworkInstanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

FrameworkInstanceInfo* FrameworkInstanceInfo::default_instance_ = NULL;

FrameworkInstanceInfo* FrameworkInstanceInfo::New() const {
  return new FrameworkInstanceInfo;
}

void FrameworkInstanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framework_id_ = 0u;
    framework_instance_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkInstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framework_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_id_)));
          set_has_framework_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_framework_instance_id;
        break;
      }
      
      // required uint32 framework_instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_framework_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_instance_id_)));
          set_has_framework_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkInstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framework_id(), output);
  }
  
  // required uint32 framework_instance_id = 2;
  if (has_framework_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->framework_instance_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkInstanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framework_id(), target);
  }
  
  // required uint32 framework_instance_id = 2;
  if (has_framework_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->framework_instance_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkInstanceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 framework_id = 1;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_id());
    }
    
    // required uint32 framework_instance_id = 2;
    if (has_framework_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_instance_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkInstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkInstanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkInstanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkInstanceInfo::MergeFrom(const FrameworkInstanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_id()) {
      set_framework_id(from.framework_id());
    }
    if (from.has_framework_instance_id()) {
      set_framework_instance_id(from.framework_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkInstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkInstanceInfo::CopyFrom(const FrameworkInstanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkInstanceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FrameworkInstanceInfo::Swap(FrameworkInstanceInfo* other) {
  if (other != this) {
    std::swap(framework_id_, other->framework_id_);
    std::swap(framework_instance_id_, other->framework_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkInstanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkInstanceInfo_descriptor_;
  metadata.reflection = FrameworkInstanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetAddress::kIpFieldNumber;
const int NetAddress::kPortFieldNumber;
#endif  // !_MSC_VER

NetAddress::NetAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetAddress::InitAsDefaultInstance() {
}

NetAddress::NetAddress(const NetAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetAddress::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetAddress::~NetAddress() {
  SharedDtor();
}

void NetAddress::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void NetAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetAddress_descriptor_;
}

const NetAddress& NetAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

NetAddress* NetAddress::default_instance_ = NULL;

NetAddress* NetAddress::New() const {
  return new NetAddress;
}

void NetAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetAddress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetAddress::MergeFrom(const NetAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetAddress::CopyFrom(const NetAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NetAddress::Swap(NetAddress* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetAddress_descriptor_;
  metadata.reflection = NetAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddressResourceInfo::kFrameworkInstanceInfoFieldNumber;
const int AddressResourceInfo::kIpFieldNumber;
const int AddressResourceInfo::kResourceInfoFieldNumber;
#endif  // !_MSC_VER

AddressResourceInfo::AddressResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddressResourceInfo::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
  resource_info_ = const_cast< ::FwmRcProto::ResourceInfo*>(&::FwmRcProto::ResourceInfo::default_instance());
}

AddressResourceInfo::AddressResourceInfo(const AddressResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddressResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressResourceInfo::~AddressResourceInfo() {
  SharedDtor();
}

void AddressResourceInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete framework_instance_info_;
    delete resource_info_;
  }
}

void AddressResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddressResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressResourceInfo_descriptor_;
}

const AddressResourceInfo& AddressResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

AddressResourceInfo* AddressResourceInfo::default_instance_ = NULL;

AddressResourceInfo* AddressResourceInfo::New() const {
  return new AddressResourceInfo;
}

void AddressResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_resource_info()) {
      if (resource_info_ != NULL) resource_info_->::FwmRcProto::ResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resource_info;
        break;
      }
      
      // optional .FwmRcProto.ResourceInfo resource_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddressResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }
  
  // optional .FwmRcProto.ResourceInfo resource_info = 3;
  if (has_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resource_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddressResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }
  
  // optional .FwmRcProto.ResourceInfo resource_info = 3;
  if (has_resource_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resource_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddressResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }
    
    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional .FwmRcProto.ResourceInfo resource_info = 3;
    if (has_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddressResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressResourceInfo::MergeFrom(const AddressResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_resource_info()) {
      mutable_resource_info()->::FwmRcProto::ResourceInfo::MergeFrom(from.resource_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressResourceInfo::CopyFrom(const AddressResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  if (has_resource_info()) {
    if (!this->resource_info().IsInitialized()) return false;
  }
  return true;
}

void AddressResourceInfo::Swap(AddressResourceInfo* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(ip_, other->ip_);
    std::swap(resource_info_, other->resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddressResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddressResourceInfo_descriptor_;
  metadata.reflection = AddressResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FWMasterInfo::kModuleNameFieldNumber;
const int FWMasterInfo::kFWMasterIpFieldNumber;
#endif  // !_MSC_VER

FWMasterInfo::FWMasterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FWMasterInfo::InitAsDefaultInstance() {
}

FWMasterInfo::FWMasterInfo(const FWMasterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FWMasterInfo::SharedCtor() {
  _cached_size_ = 0;
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fw_master_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FWMasterInfo::~FWMasterInfo() {
  SharedDtor();
}

void FWMasterInfo::SharedDtor() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (fw_master_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete fw_master_ip_;
  }
  if (this != default_instance_) {
  }
}

void FWMasterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FWMasterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FWMasterInfo_descriptor_;
}

const FWMasterInfo& FWMasterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

FWMasterInfo* FWMasterInfo::default_instance_ = NULL;

FWMasterInfo* FWMasterInfo::New() const {
  return new FWMasterInfo;
}

void FWMasterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
    if (has_fw_master_ip()) {
      if (fw_master_ip_ != &::google::protobuf::internal::kEmptyString) {
        fw_master_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FWMasterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string module_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FW_master_ip;
        break;
      }
      
      // optional string FW_master_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FW_master_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fw_master_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fw_master_ip().data(), this->fw_master_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FWMasterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->module_name(), output);
  }
  
  // optional string FW_master_ip = 2;
  if (has_fw_master_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fw_master_ip().data(), this->fw_master_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fw_master_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FWMasterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module_name(), target);
  }
  
  // optional string FW_master_ip = 2;
  if (has_fw_master_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fw_master_ip().data(), this->fw_master_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fw_master_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FWMasterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string module_name = 1;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }
    
    // optional string FW_master_ip = 2;
    if (has_fw_master_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fw_master_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FWMasterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FWMasterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FWMasterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FWMasterInfo::MergeFrom(const FWMasterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_fw_master_ip()) {
      set_fw_master_ip(from.fw_master_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FWMasterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FWMasterInfo::CopyFrom(const FWMasterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FWMasterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FWMasterInfo::Swap(FWMasterInfo* other) {
  if (other != this) {
    std::swap(module_name_, other->module_name_);
    std::swap(fw_master_ip_, other->fw_master_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FWMasterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FWMasterInfo_descriptor_;
  metadata.reflection = FWMasterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FWMRCRegister::kFrameworkInstanceInfoFieldNumber;
const int FWMRCRegister::kFrameworkMasterInfoFieldNumber;
const int FWMRCRegister::kDataSearchEntryFieldNumber;
#endif  // !_MSC_VER

FWMRCRegister::FWMRCRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FWMRCRegister::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
  framework_master_info_ = const_cast< ::FwmRcProto::FWMasterInfo*>(&::FwmRcProto::FWMasterInfo::default_instance());
  data_search_entry_ = const_cast< ::FwmRcProto::NetAddress*>(&::FwmRcProto::NetAddress::default_instance());
}

FWMRCRegister::FWMRCRegister(const FWMRCRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FWMRCRegister::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  framework_master_info_ = NULL;
  data_search_entry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FWMRCRegister::~FWMRCRegister() {
  SharedDtor();
}

void FWMRCRegister::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_info_;
    delete framework_master_info_;
    delete data_search_entry_;
  }
}

void FWMRCRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FWMRCRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FWMRCRegister_descriptor_;
}

const FWMRCRegister& FWMRCRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

FWMRCRegister* FWMRCRegister::default_instance_ = NULL;

FWMRCRegister* FWMRCRegister::New() const {
  return new FWMRCRegister;
}

void FWMRCRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
    if (has_framework_master_info()) {
      if (framework_master_info_ != NULL) framework_master_info_->::FwmRcProto::FWMasterInfo::Clear();
    }
    if (has_data_search_entry()) {
      if (data_search_entry_ != NULL) data_search_entry_->::FwmRcProto::NetAddress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FWMRCRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_framework_master_info;
        break;
      }
      
      // optional .FwmRcProto.FWMasterInfo framework_master_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_framework_master_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_master_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data_search_entry;
        break;
      }
      
      // optional .FwmRcProto.NetAddress data_search_entry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_search_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_search_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FWMRCRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }
  
  // optional .FwmRcProto.FWMasterInfo framework_master_info = 2;
  if (has_framework_master_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->framework_master_info(), output);
  }
  
  // optional .FwmRcProto.NetAddress data_search_entry = 3;
  if (has_data_search_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data_search_entry(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FWMRCRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }
  
  // optional .FwmRcProto.FWMasterInfo framework_master_info = 2;
  if (has_framework_master_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->framework_master_info(), target);
  }
  
  // optional .FwmRcProto.NetAddress data_search_entry = 3;
  if (has_data_search_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data_search_entry(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FWMRCRegister::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }
    
    // optional .FwmRcProto.FWMasterInfo framework_master_info = 2;
    if (has_framework_master_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_master_info());
    }
    
    // optional .FwmRcProto.NetAddress data_search_entry = 3;
    if (has_data_search_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_search_entry());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FWMRCRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FWMRCRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FWMRCRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FWMRCRegister::MergeFrom(const FWMRCRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_framework_master_info()) {
      mutable_framework_master_info()->::FwmRcProto::FWMasterInfo::MergeFrom(from.framework_master_info());
    }
    if (from.has_data_search_entry()) {
      mutable_data_search_entry()->::FwmRcProto::NetAddress::MergeFrom(from.data_search_entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FWMRCRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FWMRCRegister::CopyFrom(const FWMRCRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FWMRCRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  if (has_framework_master_info()) {
    if (!this->framework_master_info().IsInitialized()) return false;
  }
  if (has_data_search_entry()) {
    if (!this->data_search_entry().IsInitialized()) return false;
  }
  return true;
}

void FWMRCRegister::Swap(FWMRCRegister* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(framework_master_info_, other->framework_master_info_);
    std::swap(data_search_entry_, other->data_search_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FWMRCRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FWMRCRegister_descriptor_;
  metadata.reflection = FWMRCRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FWMRCRegisterACK::kStatuscodeFieldNumber;
#endif  // !_MSC_VER

FWMRCRegisterACK::FWMRCRegisterACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FWMRCRegisterACK::InitAsDefaultInstance() {
}

FWMRCRegisterACK::FWMRCRegisterACK(const FWMRCRegisterACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FWMRCRegisterACK::SharedCtor() {
  _cached_size_ = 0;
  statuscode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FWMRCRegisterACK::~FWMRCRegisterACK() {
  SharedDtor();
}

void FWMRCRegisterACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FWMRCRegisterACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FWMRCRegisterACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FWMRCRegisterACK_descriptor_;
}

const FWMRCRegisterACK& FWMRCRegisterACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

FWMRCRegisterACK* FWMRCRegisterACK::default_instance_ = NULL;

FWMRCRegisterACK* FWMRCRegisterACK::New() const {
  return new FWMRCRegisterACK;
}

void FWMRCRegisterACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statuscode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FWMRCRegisterACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statuscode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FWMRCRegisterACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FWMRCRegisterACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FWMRCRegisterACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statuscode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FWMRCRegisterACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FWMRCRegisterACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FWMRCRegisterACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FWMRCRegisterACK::MergeFrom(const FWMRCRegisterACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FWMRCRegisterACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FWMRCRegisterACK::CopyFrom(const FWMRCRegisterACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FWMRCRegisterACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FWMRCRegisterACK::Swap(FWMRCRegisterACK* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FWMRCRegisterACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FWMRCRegisterACK_descriptor_;
  metadata.reflection = FWMRCRegisterACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EachMachineResourceInfo::kIpFieldNumber;
const int EachMachineResourceInfo::kResourceInfoFieldNumber;
#endif  // !_MSC_VER

EachMachineResourceInfo::EachMachineResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EachMachineResourceInfo::InitAsDefaultInstance() {
  resource_info_ = const_cast< ::FwmRcProto::ResourceInfo*>(&::FwmRcProto::ResourceInfo::default_instance());
}

EachMachineResourceInfo::EachMachineResourceInfo(const EachMachineResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EachMachineResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EachMachineResourceInfo::~EachMachineResourceInfo() {
  SharedDtor();
}

void EachMachineResourceInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete resource_info_;
  }
}

void EachMachineResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EachMachineResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EachMachineResourceInfo_descriptor_;
}

const EachMachineResourceInfo& EachMachineResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

EachMachineResourceInfo* EachMachineResourceInfo::default_instance_ = NULL;

EachMachineResourceInfo* EachMachineResourceInfo::New() const {
  return new EachMachineResourceInfo;
}

void EachMachineResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_resource_info()) {
      if (resource_info_ != NULL) resource_info_->::FwmRcProto::ResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EachMachineResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource_info;
        break;
      }
      
      // optional .FwmRcProto.ResourceInfo resource_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EachMachineResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // optional .FwmRcProto.ResourceInfo resource_info = 2;
  if (has_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resource_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EachMachineResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // optional .FwmRcProto.ResourceInfo resource_info = 2;
  if (has_resource_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resource_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EachMachineResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional .FwmRcProto.ResourceInfo resource_info = 2;
    if (has_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EachMachineResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EachMachineResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EachMachineResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EachMachineResourceInfo::MergeFrom(const EachMachineResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_resource_info()) {
      mutable_resource_info()->::FwmRcProto::ResourceInfo::MergeFrom(from.resource_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EachMachineResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EachMachineResourceInfo::CopyFrom(const EachMachineResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EachMachineResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_resource_info()) {
    if (!this->resource_info().IsInitialized()) return false;
  }
  return true;
}

void EachMachineResourceInfo::Swap(EachMachineResourceInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(resource_info_, other->resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EachMachineResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EachMachineResourceInfo_descriptor_;
  metadata.reflection = EachMachineResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSlaveResource::kFrameworkInstanceInfoFieldNumber;
const int RequestSlaveResource::kModuleNameFieldNumber;
const int RequestSlaveResource::kEachResourceInfoFieldNumber;
#endif  // !_MSC_VER

RequestSlaveResource::RequestSlaveResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestSlaveResource::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
}

RequestSlaveResource::RequestSlaveResource(const RequestSlaveResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSlaveResource::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSlaveResource::~RequestSlaveResource() {
  SharedDtor();
}

void RequestSlaveResource::SharedDtor() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (this != default_instance_) {
    delete framework_instance_info_;
  }
}

void RequestSlaveResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSlaveResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSlaveResource_descriptor_;
}

const RequestSlaveResource& RequestSlaveResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

RequestSlaveResource* RequestSlaveResource::default_instance_ = NULL;

RequestSlaveResource* RequestSlaveResource::New() const {
  return new RequestSlaveResource;
}

void RequestSlaveResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
  }
  each_resource_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSlaveResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_module_name;
        break;
      }
      
      // optional string module_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_each_resource_info;
        break;
      }
      
      // repeated .FwmRcProto.EachMachineResourceInfo each_resource_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_each_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_each_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_each_resource_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestSlaveResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }
  
  // optional string module_name = 2;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->module_name(), output);
  }
  
  // repeated .FwmRcProto.EachMachineResourceInfo each_resource_info = 3;
  for (int i = 0; i < this->each_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->each_resource_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestSlaveResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }
  
  // optional string module_name = 2;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->module_name(), target);
  }
  
  // repeated .FwmRcProto.EachMachineResourceInfo each_resource_info = 3;
  for (int i = 0; i < this->each_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->each_resource_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestSlaveResource::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }
    
    // optional string module_name = 2;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }
    
  }
  // repeated .FwmRcProto.EachMachineResourceInfo each_resource_info = 3;
  total_size += 1 * this->each_resource_info_size();
  for (int i = 0; i < this->each_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->each_resource_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSlaveResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSlaveResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSlaveResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSlaveResource::MergeFrom(const RequestSlaveResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  each_resource_info_.MergeFrom(from.each_resource_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSlaveResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSlaveResource::CopyFrom(const RequestSlaveResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSlaveResource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  for (int i = 0; i < each_resource_info_size(); i++) {
    if (!this->each_resource_info(i).IsInitialized()) return false;
  }
  return true;
}

void RequestSlaveResource::Swap(RequestSlaveResource* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(module_name_, other->module_name_);
    each_resource_info_.Swap(&other->each_resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSlaveResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSlaveResource_descriptor_;
  metadata.reflection = RequestSlaveResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EachNCResourceAddress::kNCNetAddressFieldNumber;
const int EachNCResourceAddress::kResourceInfoFieldNumber;
#endif  // !_MSC_VER

EachNCResourceAddress::EachNCResourceAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EachNCResourceAddress::InitAsDefaultInstance() {
  nc_net_address_ = const_cast< ::FwmRcProto::NetAddress*>(&::FwmRcProto::NetAddress::default_instance());
  resource_info_ = const_cast< ::FwmRcProto::ResourceInfo*>(&::FwmRcProto::ResourceInfo::default_instance());
}

EachNCResourceAddress::EachNCResourceAddress(const EachNCResourceAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EachNCResourceAddress::SharedCtor() {
  _cached_size_ = 0;
  nc_net_address_ = NULL;
  resource_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EachNCResourceAddress::~EachNCResourceAddress() {
  SharedDtor();
}

void EachNCResourceAddress::SharedDtor() {
  if (this != default_instance_) {
    delete nc_net_address_;
    delete resource_info_;
  }
}

void EachNCResourceAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EachNCResourceAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EachNCResourceAddress_descriptor_;
}

const EachNCResourceAddress& EachNCResourceAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

EachNCResourceAddress* EachNCResourceAddress::default_instance_ = NULL;

EachNCResourceAddress* EachNCResourceAddress::New() const {
  return new EachNCResourceAddress;
}

void EachNCResourceAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nc_net_address()) {
      if (nc_net_address_ != NULL) nc_net_address_->::FwmRcProto::NetAddress::Clear();
    }
    if (has_resource_info()) {
      if (resource_info_ != NULL) resource_info_->::FwmRcProto::ResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EachNCResourceAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.NetAddress NC_net_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nc_net_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource_info;
        break;
      }
      
      // optional .FwmRcProto.ResourceInfo resource_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EachNCResourceAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.NetAddress NC_net_address = 1;
  if (has_nc_net_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nc_net_address(), output);
  }
  
  // optional .FwmRcProto.ResourceInfo resource_info = 2;
  if (has_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resource_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EachNCResourceAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.NetAddress NC_net_address = 1;
  if (has_nc_net_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nc_net_address(), target);
  }
  
  // optional .FwmRcProto.ResourceInfo resource_info = 2;
  if (has_resource_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resource_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EachNCResourceAddress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.NetAddress NC_net_address = 1;
    if (has_nc_net_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nc_net_address());
    }
    
    // optional .FwmRcProto.ResourceInfo resource_info = 2;
    if (has_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EachNCResourceAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EachNCResourceAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EachNCResourceAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EachNCResourceAddress::MergeFrom(const EachNCResourceAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nc_net_address()) {
      mutable_nc_net_address()->::FwmRcProto::NetAddress::MergeFrom(from.nc_net_address());
    }
    if (from.has_resource_info()) {
      mutable_resource_info()->::FwmRcProto::ResourceInfo::MergeFrom(from.resource_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EachNCResourceAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EachNCResourceAddress::CopyFrom(const EachNCResourceAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EachNCResourceAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_nc_net_address()) {
    if (!this->nc_net_address().IsInitialized()) return false;
  }
  if (has_resource_info()) {
    if (!this->resource_info().IsInitialized()) return false;
  }
  return true;
}

void EachNCResourceAddress::Swap(EachNCResourceAddress* other) {
  if (other != this) {
    std::swap(nc_net_address_, other->nc_net_address_);
    std::swap(resource_info_, other->resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EachNCResourceAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EachNCResourceAddress_descriptor_;
  metadata.reflection = EachNCResourceAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespondRequestSlaveResource::kAddressResourceInfoFieldNumber;
#endif  // !_MSC_VER

RespondRequestSlaveResource::RespondRequestSlaveResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RespondRequestSlaveResource::InitAsDefaultInstance() {
}

RespondRequestSlaveResource::RespondRequestSlaveResource(const RespondRequestSlaveResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RespondRequestSlaveResource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespondRequestSlaveResource::~RespondRequestSlaveResource() {
  SharedDtor();
}

void RespondRequestSlaveResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RespondRequestSlaveResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespondRequestSlaveResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespondRequestSlaveResource_descriptor_;
}

const RespondRequestSlaveResource& RespondRequestSlaveResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

RespondRequestSlaveResource* RespondRequestSlaveResource::default_instance_ = NULL;

RespondRequestSlaveResource* RespondRequestSlaveResource::New() const {
  return new RespondRequestSlaveResource;
}

void RespondRequestSlaveResource::Clear() {
  address_resource_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespondRequestSlaveResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FwmRcProto.EachNCResourceAddress address_resource_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_address_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_address_resource_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RespondRequestSlaveResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FwmRcProto.EachNCResourceAddress address_resource_info = 1;
  for (int i = 0; i < this->address_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->address_resource_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RespondRequestSlaveResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FwmRcProto.EachNCResourceAddress address_resource_info = 1;
  for (int i = 0; i < this->address_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->address_resource_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RespondRequestSlaveResource::ByteSize() const {
  int total_size = 0;
  
  // repeated .FwmRcProto.EachNCResourceAddress address_resource_info = 1;
  total_size += 1 * this->address_resource_info_size();
  for (int i = 0; i < this->address_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->address_resource_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespondRequestSlaveResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespondRequestSlaveResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespondRequestSlaveResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespondRequestSlaveResource::MergeFrom(const RespondRequestSlaveResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  address_resource_info_.MergeFrom(from.address_resource_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespondRequestSlaveResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespondRequestSlaveResource::CopyFrom(const RespondRequestSlaveResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespondRequestSlaveResource::IsInitialized() const {
  
  for (int i = 0; i < address_resource_info_size(); i++) {
    if (!this->address_resource_info(i).IsInitialized()) return false;
  }
  return true;
}

void RespondRequestSlaveResource::Swap(RespondRequestSlaveResource* other) {
  if (other != this) {
    address_resource_info_.Swap(&other->address_resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespondRequestSlaveResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespondRequestSlaveResource_descriptor_;
  metadata.reflection = RespondRequestSlaveResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EachSlaveInfo::kFrameworkInstanceInfoFieldNumber;
const int EachSlaveInfo::kFrameworkSlaveIpFieldNumber;
const int EachSlaveInfo::kFrameworkSlavePIDFieldNumber;
#endif  // !_MSC_VER

EachSlaveInfo::EachSlaveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EachSlaveInfo::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
}

EachSlaveInfo::EachSlaveInfo(const EachSlaveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EachSlaveInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  framework_slave_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  framework_slave_pid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EachSlaveInfo::~EachSlaveInfo() {
  SharedDtor();
}

void EachSlaveInfo::SharedDtor() {
  if (framework_slave_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete framework_slave_ip_;
  }
  if (this != default_instance_) {
    delete framework_instance_info_;
  }
}

void EachSlaveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EachSlaveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EachSlaveInfo_descriptor_;
}

const EachSlaveInfo& EachSlaveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

EachSlaveInfo* EachSlaveInfo::default_instance_ = NULL;

EachSlaveInfo* EachSlaveInfo::New() const {
  return new EachSlaveInfo;
}

void EachSlaveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
    if (has_framework_slave_ip()) {
      if (framework_slave_ip_ != &::google::protobuf::internal::kEmptyString) {
        framework_slave_ip_->clear();
      }
    }
    framework_slave_pid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EachSlaveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_framework_slave_ip;
        break;
      }
      
      // optional string framework_slave_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_framework_slave_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_framework_slave_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->framework_slave_ip().data(), this->framework_slave_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_framework_slave_PID;
        break;
      }
      
      // optional uint32 framework_slave_PID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_framework_slave_PID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_slave_pid_)));
          set_has_framework_slave_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EachSlaveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }
  
  // optional string framework_slave_ip = 2;
  if (has_framework_slave_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->framework_slave_ip().data(), this->framework_slave_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->framework_slave_ip(), output);
  }
  
  // optional uint32 framework_slave_PID = 3;
  if (has_framework_slave_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->framework_slave_pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EachSlaveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }
  
  // optional string framework_slave_ip = 2;
  if (has_framework_slave_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->framework_slave_ip().data(), this->framework_slave_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->framework_slave_ip(), target);
  }
  
  // optional uint32 framework_slave_PID = 3;
  if (has_framework_slave_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->framework_slave_pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EachSlaveInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }
    
    // optional string framework_slave_ip = 2;
    if (has_framework_slave_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->framework_slave_ip());
    }
    
    // optional uint32 framework_slave_PID = 3;
    if (has_framework_slave_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_slave_pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EachSlaveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EachSlaveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EachSlaveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EachSlaveInfo::MergeFrom(const EachSlaveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_framework_slave_ip()) {
      set_framework_slave_ip(from.framework_slave_ip());
    }
    if (from.has_framework_slave_pid()) {
      set_framework_slave_pid(from.framework_slave_pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EachSlaveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EachSlaveInfo::CopyFrom(const EachSlaveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EachSlaveInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  return true;
}

void EachSlaveInfo::Swap(EachSlaveInfo* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(framework_slave_ip_, other->framework_slave_ip_);
    std::swap(framework_slave_pid_, other->framework_slave_pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EachSlaveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EachSlaveInfo_descriptor_;
  metadata.reflection = EachSlaveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuccessSlaveInfo::kSuccessSlaveInfoFieldNumber;
#endif  // !_MSC_VER

SuccessSlaveInfo::SuccessSlaveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SuccessSlaveInfo::InitAsDefaultInstance() {
}

SuccessSlaveInfo::SuccessSlaveInfo(const SuccessSlaveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SuccessSlaveInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuccessSlaveInfo::~SuccessSlaveInfo() {
  SharedDtor();
}

void SuccessSlaveInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuccessSlaveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuccessSlaveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuccessSlaveInfo_descriptor_;
}

const SuccessSlaveInfo& SuccessSlaveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

SuccessSlaveInfo* SuccessSlaveInfo::default_instance_ = NULL;

SuccessSlaveInfo* SuccessSlaveInfo::New() const {
  return new SuccessSlaveInfo;
}

void SuccessSlaveInfo::Clear() {
  success_slave_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuccessSlaveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FwmRcProto.EachSlaveInfo success_slave_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_success_slave_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_success_slave_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_success_slave_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SuccessSlaveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FwmRcProto.EachSlaveInfo success_slave_info = 1;
  for (int i = 0; i < this->success_slave_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->success_slave_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SuccessSlaveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FwmRcProto.EachSlaveInfo success_slave_info = 1;
  for (int i = 0; i < this->success_slave_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->success_slave_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SuccessSlaveInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .FwmRcProto.EachSlaveInfo success_slave_info = 1;
  total_size += 1 * this->success_slave_info_size();
  for (int i = 0; i < this->success_slave_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->success_slave_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuccessSlaveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuccessSlaveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuccessSlaveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuccessSlaveInfo::MergeFrom(const SuccessSlaveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  success_slave_info_.MergeFrom(from.success_slave_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuccessSlaveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuccessSlaveInfo::CopyFrom(const SuccessSlaveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuccessSlaveInfo::IsInitialized() const {
  
  for (int i = 0; i < success_slave_info_size(); i++) {
    if (!this->success_slave_info(i).IsInitialized()) return false;
  }
  return true;
}

void SuccessSlaveInfo::Swap(SuccessSlaveInfo* other) {
  if (other != this) {
    success_slave_info_.Swap(&other->success_slave_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuccessSlaveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuccessSlaveInfo_descriptor_;
  metadata.reflection = SuccessSlaveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTaskResource::kTaskResourceInfoFieldNumber;
#endif  // !_MSC_VER

RequestTaskResource::RequestTaskResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestTaskResource::InitAsDefaultInstance() {
}

RequestTaskResource::RequestTaskResource(const RequestTaskResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTaskResource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTaskResource::~RequestTaskResource() {
  SharedDtor();
}

void RequestTaskResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestTaskResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTaskResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTaskResource_descriptor_;
}

const RequestTaskResource& RequestTaskResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

RequestTaskResource* RequestTaskResource::default_instance_ = NULL;

RequestTaskResource* RequestTaskResource::New() const {
  return new RequestTaskResource;
}

void RequestTaskResource::Clear() {
  task_resource_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTaskResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FwmRcProto.AddressResourceInfo task_resource_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task_resource_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTaskResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FwmRcProto.AddressResourceInfo task_resource_info = 1;
  for (int i = 0; i < this->task_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_resource_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestTaskResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FwmRcProto.AddressResourceInfo task_resource_info = 1;
  for (int i = 0; i < this->task_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_resource_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestTaskResource::ByteSize() const {
  int total_size = 0;
  
  // repeated .FwmRcProto.AddressResourceInfo task_resource_info = 1;
  total_size += 1 * this->task_resource_info_size();
  for (int i = 0; i < this->task_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_resource_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTaskResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTaskResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTaskResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTaskResource::MergeFrom(const RequestTaskResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_resource_info_.MergeFrom(from.task_resource_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTaskResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTaskResource::CopyFrom(const RequestTaskResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTaskResource::IsInitialized() const {
  
  for (int i = 0; i < task_resource_info_size(); i++) {
    if (!this->task_resource_info(i).IsInitialized()) return false;
  }
  return true;
}

void RequestTaskResource::Swap(RequestTaskResource* other) {
  if (other != this) {
    task_resource_info_.Swap(&other->task_resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTaskResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTaskResource_descriptor_;
  metadata.reflection = RequestTaskResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceAddress::kNCNetAddressFieldNumber;
const int ResourceAddress::kFrameworkInstanceInfoFieldNumber;
#endif  // !_MSC_VER

ResourceAddress::ResourceAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceAddress::InitAsDefaultInstance() {
  nc_net_address_ = const_cast< ::FwmRcProto::NetAddress*>(&::FwmRcProto::NetAddress::default_instance());
  framework_instance_info_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
}

ResourceAddress::ResourceAddress(const ResourceAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceAddress::SharedCtor() {
  _cached_size_ = 0;
  nc_net_address_ = NULL;
  framework_instance_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceAddress::~ResourceAddress() {
  SharedDtor();
}

void ResourceAddress::SharedDtor() {
  if (this != default_instance_) {
    delete nc_net_address_;
    delete framework_instance_info_;
  }
}

void ResourceAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceAddress_descriptor_;
}

const ResourceAddress& ResourceAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

ResourceAddress* ResourceAddress::default_instance_ = NULL;

ResourceAddress* ResourceAddress::New() const {
  return new ResourceAddress;
}

void ResourceAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nc_net_address()) {
      if (nc_net_address_ != NULL) nc_net_address_->::FwmRcProto::NetAddress::Clear();
    }
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.NetAddress NC_net_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nc_net_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_framework_instance_info;
        break;
      }
      
      // optional .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_framework_instance_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.NetAddress NC_net_address = 1;
  if (has_nc_net_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nc_net_address(), output);
  }
  
  // optional .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 2;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->framework_instance_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.NetAddress NC_net_address = 1;
  if (has_nc_net_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nc_net_address(), target);
  }
  
  // optional .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 2;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->framework_instance_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceAddress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.NetAddress NC_net_address = 1;
    if (has_nc_net_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nc_net_address());
    }
    
    // optional .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 2;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceAddress::MergeFrom(const ResourceAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nc_net_address()) {
      mutable_nc_net_address()->::FwmRcProto::NetAddress::MergeFrom(from.nc_net_address());
    }
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceAddress::CopyFrom(const ResourceAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_nc_net_address()) {
    if (!this->nc_net_address().IsInitialized()) return false;
  }
  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  return true;
}

void ResourceAddress::Swap(ResourceAddress* other) {
  if (other != this) {
    std::swap(nc_net_address_, other->nc_net_address_);
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceAddress_descriptor_;
  metadata.reflection = ResourceAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespondRequestTaskResource::kResourceAddressFieldNumber;
#endif  // !_MSC_VER

RespondRequestTaskResource::RespondRequestTaskResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RespondRequestTaskResource::InitAsDefaultInstance() {
}

RespondRequestTaskResource::RespondRequestTaskResource(const RespondRequestTaskResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RespondRequestTaskResource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespondRequestTaskResource::~RespondRequestTaskResource() {
  SharedDtor();
}

void RespondRequestTaskResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RespondRequestTaskResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespondRequestTaskResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespondRequestTaskResource_descriptor_;
}

const RespondRequestTaskResource& RespondRequestTaskResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

RespondRequestTaskResource* RespondRequestTaskResource::default_instance_ = NULL;

RespondRequestTaskResource* RespondRequestTaskResource::New() const {
  return new RespondRequestTaskResource;
}

void RespondRequestTaskResource::Clear() {
  resource_address_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespondRequestTaskResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FwmRcProto.ResourceAddress resource_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_resource_address;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RespondRequestTaskResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FwmRcProto.ResourceAddress resource_address = 1;
  for (int i = 0; i < this->resource_address_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resource_address(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RespondRequestTaskResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FwmRcProto.ResourceAddress resource_address = 1;
  for (int i = 0; i < this->resource_address_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resource_address(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RespondRequestTaskResource::ByteSize() const {
  int total_size = 0;
  
  // repeated .FwmRcProto.ResourceAddress resource_address = 1;
  total_size += 1 * this->resource_address_size();
  for (int i = 0; i < this->resource_address_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource_address(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespondRequestTaskResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespondRequestTaskResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespondRequestTaskResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespondRequestTaskResource::MergeFrom(const RespondRequestTaskResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  resource_address_.MergeFrom(from.resource_address_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespondRequestTaskResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespondRequestTaskResource::CopyFrom(const RespondRequestTaskResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespondRequestTaskResource::IsInitialized() const {
  
  for (int i = 0; i < resource_address_size(); i++) {
    if (!this->resource_address(i).IsInitialized()) return false;
  }
  return true;
}

void RespondRequestTaskResource::Swap(RespondRequestTaskResource* other) {
  if (other != this) {
    resource_address_.Swap(&other->resource_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespondRequestTaskResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespondRequestTaskResource_descriptor_;
  metadata.reflection = RespondRequestTaskResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnTaskResource::kTaskResourceInfoFieldNumber;
#endif  // !_MSC_VER

ReturnTaskResource::ReturnTaskResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnTaskResource::InitAsDefaultInstance() {
}

ReturnTaskResource::ReturnTaskResource(const ReturnTaskResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnTaskResource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnTaskResource::~ReturnTaskResource() {
  SharedDtor();
}

void ReturnTaskResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnTaskResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnTaskResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnTaskResource_descriptor_;
}

const ReturnTaskResource& ReturnTaskResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

ReturnTaskResource* ReturnTaskResource::default_instance_ = NULL;

ReturnTaskResource* ReturnTaskResource::New() const {
  return new ReturnTaskResource;
}

void ReturnTaskResource::Clear() {
  task_resource_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnTaskResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FwmRcProto.AddressResourceInfo task_resource_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task_resource_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnTaskResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FwmRcProto.AddressResourceInfo task_resource_info = 1;
  for (int i = 0; i < this->task_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_resource_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnTaskResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FwmRcProto.AddressResourceInfo task_resource_info = 1;
  for (int i = 0; i < this->task_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_resource_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnTaskResource::ByteSize() const {
  int total_size = 0;
  
  // repeated .FwmRcProto.AddressResourceInfo task_resource_info = 1;
  total_size += 1 * this->task_resource_info_size();
  for (int i = 0; i < this->task_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_resource_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnTaskResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnTaskResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnTaskResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnTaskResource::MergeFrom(const ReturnTaskResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_resource_info_.MergeFrom(from.task_resource_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnTaskResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnTaskResource::CopyFrom(const ReturnTaskResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnTaskResource::IsInitialized() const {
  
  for (int i = 0; i < task_resource_info_size(); i++) {
    if (!this->task_resource_info(i).IsInitialized()) return false;
  }
  return true;
}

void ReturnTaskResource::Swap(ReturnTaskResource* other) {
  if (other != this) {
    task_resource_info_.Swap(&other->task_resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnTaskResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnTaskResource_descriptor_;
  metadata.reflection = ReturnTaskResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IPProcessInfo::kIpFieldNumber;
const int IPProcessInfo::kProcessIdFieldNumber;
#endif  // !_MSC_VER

IPProcessInfo::IPProcessInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPProcessInfo::InitAsDefaultInstance() {
}

IPProcessInfo::IPProcessInfo(const IPProcessInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPProcessInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPProcessInfo::~IPProcessInfo() {
  SharedDtor();
}

void IPProcessInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void IPProcessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPProcessInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPProcessInfo_descriptor_;
}

const IPProcessInfo& IPProcessInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

IPProcessInfo* IPProcessInfo::default_instance_ = NULL;

IPProcessInfo* IPProcessInfo::New() const {
  return new IPProcessInfo;
}

void IPProcessInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    process_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPProcessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_process_id;
        break;
      }
      
      // optional uint32 process_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPProcessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // optional uint32 process_id = 2;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->process_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPProcessInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // optional uint32 process_id = 2;
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->process_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPProcessInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional uint32 process_id = 2;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPProcessInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPProcessInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPProcessInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPProcessInfo::MergeFrom(const IPProcessInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPProcessInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPProcessInfo::CopyFrom(const IPProcessInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPProcessInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void IPProcessInfo::Swap(IPProcessInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(process_id_, other->process_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPProcessInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPProcessInfo_descriptor_;
  metadata.reflection = IPProcessInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopModuleInfo::kFrameworkInstanceFieldNumber;
const int StopModuleInfo::kIpProcessFieldNumber;
#endif  // !_MSC_VER

StopModuleInfo::StopModuleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopModuleInfo::InitAsDefaultInstance() {
  framework_instance_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
}

StopModuleInfo::StopModuleInfo(const StopModuleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopModuleInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopModuleInfo::~StopModuleInfo() {
  SharedDtor();
}

void StopModuleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_;
  }
}

void StopModuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopModuleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopModuleInfo_descriptor_;
}

const StopModuleInfo& StopModuleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

StopModuleInfo* StopModuleInfo::default_instance_ = NULL;

StopModuleInfo* StopModuleInfo::New() const {
  return new StopModuleInfo;
}

void StopModuleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance()) {
      if (framework_instance_ != NULL) framework_instance_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
  }
  ip_process_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopModuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.FrameworkInstanceInfo framework_Instance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_process;
        break;
      }
      
      // repeated .FwmRcProto.IPProcessInfo ip_process = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ip_process()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_process;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopModuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_Instance = 1;
  if (has_framework_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance(), output);
  }
  
  // repeated .FwmRcProto.IPProcessInfo ip_process = 2;
  for (int i = 0; i < this->ip_process_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ip_process(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopModuleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_Instance = 1;
  if (has_framework_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance(), target);
  }
  
  // repeated .FwmRcProto.IPProcessInfo ip_process = 2;
  for (int i = 0; i < this->ip_process_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ip_process(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopModuleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.FrameworkInstanceInfo framework_Instance = 1;
    if (has_framework_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance());
    }
    
  }
  // repeated .FwmRcProto.IPProcessInfo ip_process = 2;
  total_size += 1 * this->ip_process_size();
  for (int i = 0; i < this->ip_process_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ip_process(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopModuleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopModuleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopModuleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopModuleInfo::MergeFrom(const StopModuleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_process_.MergeFrom(from.ip_process_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance()) {
      mutable_framework_instance()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopModuleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopModuleInfo::CopyFrom(const StopModuleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopModuleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_framework_instance()) {
    if (!this->framework_instance().IsInitialized()) return false;
  }
  for (int i = 0; i < ip_process_size(); i++) {
    if (!this->ip_process(i).IsInitialized()) return false;
  }
  return true;
}

void StopModuleInfo::Swap(StopModuleInfo* other) {
  if (other != this) {
    std::swap(framework_instance_, other->framework_instance_);
    ip_process_.Swap(&other->ip_process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopModuleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopModuleInfo_descriptor_;
  metadata.reflection = StopModuleInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FwmRcProto

// @@protoc_insertion_point(global_scope)
