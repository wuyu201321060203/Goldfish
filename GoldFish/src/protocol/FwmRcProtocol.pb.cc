// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FwmRcProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FwmRcProto {

namespace {

const ::google::protobuf::Descriptor* FrameworkInstanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkInstanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GpuResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GpuResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EachModuleRequestOrReturnResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EachModuleRequestOrReturnResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* EachModuleResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EachModuleResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestStartSlave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStartSlave_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestStartSlaveAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStartSlaveAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTaskResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTaskResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTaskResourceAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTaskResourceAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnTaskResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnTaskResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnTaskResourceAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnTaskResourceAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopModule_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopModuleAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopModuleAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseFrameworkInstanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseFrameworkInstanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseFrameworkInstanceInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseFrameworkInstanceInfoAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FwmRcProtocol_2eproto() {
  protobuf_AddDesc_FwmRcProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FwmRcProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  FrameworkInstanceInfo_descriptor_ = file->message_type(0);
  static const int FrameworkInstanceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, framework_instance_id_),
  };
  FrameworkInstanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkInstanceInfo_descriptor_,
      FrameworkInstanceInfo::default_instance_,
      FrameworkInstanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkInstanceInfo));
  GpuResourceInfo_descriptor_ = file->message_type(1);
  static const int GpuResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, gpu_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, gpu_mem_size_),
  };
  GpuResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GpuResourceInfo_descriptor_,
      GpuResourceInfo::default_instance_,
      GpuResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GpuResourceInfo));
  ResourceInfo_descriptor_ = file->message_type(2);
  static const int ResourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, cpu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, cpu_mem_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, gpu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, gpu_resource_info_),
  };
  ResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceInfo_descriptor_,
      ResourceInfo::default_instance_,
      ResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceInfo));
  EachModuleRequestOrReturnResourceInfo_descriptor_ = file->message_type(3);
  static const int EachModuleRequestOrReturnResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachModuleRequestOrReturnResourceInfo, resource_request_or_return_to_module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachModuleRequestOrReturnResourceInfo, resource_info_),
  };
  EachModuleRequestOrReturnResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EachModuleRequestOrReturnResourceInfo_descriptor_,
      EachModuleRequestOrReturnResourceInfo::default_instance_,
      EachModuleRequestOrReturnResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachModuleRequestOrReturnResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachModuleRequestOrReturnResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EachModuleRequestOrReturnResourceInfo));
  NetAddress_descriptor_ = file->message_type(4);
  static const int NetAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetAddress, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetAddress, port_),
  };
  NetAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetAddress_descriptor_,
      NetAddress::default_instance_,
      NetAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetAddress));
  Register_descriptor_ = file->message_type(5);
  static const int Register_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, self_module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, data_search_entry_),
  };
  Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Register_descriptor_,
      Register::default_instance_,
      Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Register));
  RegisterAck_descriptor_ = file->message_type(6);
  static const int RegisterAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAck, statuscode_),
  };
  RegisterAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterAck_descriptor_,
      RegisterAck::default_instance_,
      RegisterAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterAck));
  EachModuleResourceInfo_descriptor_ = file->message_type(7);
  static const int EachModuleResourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachModuleResourceInfo, start_module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachModuleResourceInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachModuleResourceInfo, resource_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachModuleResourceInfo, listen_port_num_),
  };
  EachModuleResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EachModuleResourceInfo_descriptor_,
      EachModuleResourceInfo::default_instance_,
      EachModuleResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachModuleResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EachModuleResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EachModuleResourceInfo));
  RequestStartSlave_descriptor_ = file->message_type(8);
  static const int RequestStartSlave_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartSlave, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartSlave, self_module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartSlave, start_module_resource_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartSlave, fwm_net_address_),
  };
  RequestStartSlave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestStartSlave_descriptor_,
      RequestStartSlave::default_instance_,
      RequestStartSlave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartSlave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartSlave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestStartSlave));
  RequestStartSlaveAck_descriptor_ = file->message_type(9);
  static const int RequestStartSlaveAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartSlaveAck, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartSlaveAck, module_id_),
  };
  RequestStartSlaveAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestStartSlaveAck_descriptor_,
      RequestStartSlaveAck::default_instance_,
      RequestStartSlaveAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartSlaveAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartSlaveAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestStartSlaveAck));
  RequestTaskResource_descriptor_ = file->message_type(10);
  static const int RequestTaskResource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTaskResource, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTaskResource, self_module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTaskResource, module_add_resource_info_),
  };
  RequestTaskResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTaskResource_descriptor_,
      RequestTaskResource::default_instance_,
      RequestTaskResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTaskResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTaskResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTaskResource));
  RequestTaskResourceAck_descriptor_ = file->message_type(11);
  static const int RequestTaskResourceAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTaskResourceAck, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTaskResourceAck, exceed_module_id_),
  };
  RequestTaskResourceAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTaskResourceAck_descriptor_,
      RequestTaskResourceAck::default_instance_,
      RequestTaskResourceAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTaskResourceAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTaskResourceAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTaskResourceAck));
  ReturnTaskResource_descriptor_ = file->message_type(12);
  static const int ReturnTaskResource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTaskResource, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTaskResource, self_module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTaskResource, module_return_resource_info_),
  };
  ReturnTaskResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnTaskResource_descriptor_,
      ReturnTaskResource::default_instance_,
      ReturnTaskResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTaskResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTaskResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnTaskResource));
  ReturnTaskResourceAck_descriptor_ = file->message_type(13);
  static const int ReturnTaskResourceAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTaskResourceAck, statuscode_),
  };
  ReturnTaskResourceAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnTaskResourceAck_descriptor_,
      ReturnTaskResourceAck::default_instance_,
      ReturnTaskResourceAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTaskResourceAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnTaskResourceAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnTaskResourceAck));
  StopModule_descriptor_ = file->message_type(14);
  static const int StopModule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModule, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModule, self_module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModule, stop_module_id_),
  };
  StopModule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopModule_descriptor_,
      StopModule::default_instance_,
      StopModule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopModule));
  StopModuleAck_descriptor_ = file->message_type(15);
  static const int StopModuleAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModuleAck, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModuleAck, stop_module_id_),
  };
  StopModuleAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopModuleAck_descriptor_,
      StopModuleAck::default_instance_,
      StopModuleAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModuleAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopModuleAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopModuleAck));
  HeartBeatInfo_descriptor_ = file->message_type(16);
  static const int HeartBeatInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatInfo, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatInfo, self_module_id_),
  };
  HeartBeatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatInfo_descriptor_,
      HeartBeatInfo::default_instance_,
      HeartBeatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatInfo));
  HeartBeatInfoAck_descriptor_ = file->message_type(17);
  static const int HeartBeatInfoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatInfoAck, statuscode_),
  };
  HeartBeatInfoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatInfoAck_descriptor_,
      HeartBeatInfoAck::default_instance_,
      HeartBeatInfoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatInfoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatInfoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatInfoAck));
  CloseFrameworkInstanceInfo_descriptor_ = file->message_type(18);
  static const int CloseFrameworkInstanceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFrameworkInstanceInfo, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFrameworkInstanceInfo, self_module_id_),
  };
  CloseFrameworkInstanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseFrameworkInstanceInfo_descriptor_,
      CloseFrameworkInstanceInfo::default_instance_,
      CloseFrameworkInstanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFrameworkInstanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFrameworkInstanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseFrameworkInstanceInfo));
  CloseFrameworkInstanceInfoAck_descriptor_ = file->message_type(19);
  static const int CloseFrameworkInstanceInfoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFrameworkInstanceInfoAck, statuscode_),
  };
  CloseFrameworkInstanceInfoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseFrameworkInstanceInfoAck_descriptor_,
      CloseFrameworkInstanceInfoAck::default_instance_,
      CloseFrameworkInstanceInfoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFrameworkInstanceInfoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFrameworkInstanceInfoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseFrameworkInstanceInfoAck));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FwmRcProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkInstanceInfo_descriptor_, &FrameworkInstanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpuResourceInfo_descriptor_, &GpuResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceInfo_descriptor_, &ResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EachModuleRequestOrReturnResourceInfo_descriptor_, &EachModuleRequestOrReturnResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetAddress_descriptor_, &NetAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Register_descriptor_, &Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterAck_descriptor_, &RegisterAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EachModuleResourceInfo_descriptor_, &EachModuleResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestStartSlave_descriptor_, &RequestStartSlave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestStartSlaveAck_descriptor_, &RequestStartSlaveAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTaskResource_descriptor_, &RequestTaskResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTaskResourceAck_descriptor_, &RequestTaskResourceAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnTaskResource_descriptor_, &ReturnTaskResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnTaskResourceAck_descriptor_, &ReturnTaskResourceAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopModule_descriptor_, &StopModule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopModuleAck_descriptor_, &StopModuleAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatInfo_descriptor_, &HeartBeatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatInfoAck_descriptor_, &HeartBeatInfoAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseFrameworkInstanceInfo_descriptor_, &CloseFrameworkInstanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseFrameworkInstanceInfoAck_descriptor_, &CloseFrameworkInstanceInfoAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FwmRcProtocol_2eproto() {
  delete FrameworkInstanceInfo::default_instance_;
  delete FrameworkInstanceInfo_reflection_;
  delete GpuResourceInfo::default_instance_;
  delete GpuResourceInfo_reflection_;
  delete ResourceInfo::default_instance_;
  delete ResourceInfo_reflection_;
  delete EachModuleRequestOrReturnResourceInfo::default_instance_;
  delete EachModuleRequestOrReturnResourceInfo_reflection_;
  delete NetAddress::default_instance_;
  delete NetAddress_reflection_;
  delete Register::default_instance_;
  delete Register_reflection_;
  delete RegisterAck::default_instance_;
  delete RegisterAck_reflection_;
  delete EachModuleResourceInfo::default_instance_;
  delete EachModuleResourceInfo_reflection_;
  delete RequestStartSlave::default_instance_;
  delete RequestStartSlave_reflection_;
  delete RequestStartSlaveAck::default_instance_;
  delete RequestStartSlaveAck_reflection_;
  delete RequestTaskResource::default_instance_;
  delete RequestTaskResource_reflection_;
  delete RequestTaskResourceAck::default_instance_;
  delete RequestTaskResourceAck_reflection_;
  delete ReturnTaskResource::default_instance_;
  delete ReturnTaskResource_reflection_;
  delete ReturnTaskResourceAck::default_instance_;
  delete ReturnTaskResourceAck_reflection_;
  delete StopModule::default_instance_;
  delete StopModule_reflection_;
  delete StopModuleAck::default_instance_;
  delete StopModuleAck_reflection_;
  delete HeartBeatInfo::default_instance_;
  delete HeartBeatInfo_reflection_;
  delete HeartBeatInfoAck::default_instance_;
  delete HeartBeatInfoAck_reflection_;
  delete CloseFrameworkInstanceInfo::default_instance_;
  delete CloseFrameworkInstanceInfo_reflection_;
  delete CloseFrameworkInstanceInfoAck::default_instance_;
  delete CloseFrameworkInstanceInfoAck_reflection_;
}

void protobuf_AddDesc_FwmRcProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023FwmRcProtocol.proto\022\nFwmRcProto\"L\n\025Fra"
    "meworkInstanceInfo\022\024\n\014framework_id\030\001 \002(\r"
    "\022\035\n\025framework_instance_id\030\002 \002(\r\"9\n\017GpuRe"
    "sourceInfo\022\020\n\010gpu_name\030\001 \002(\t\022\024\n\014gpu_mem_"
    "size\030\002 \001(\r\"~\n\014ResourceInfo\022\017\n\007cpu_num\030\001 "
    "\002(\001\022\024\n\014cpu_mem_size\030\002 \002(\r\022\017\n\007gpu_num\030\003 \001"
    "(\r\0226\n\021gpu_resource_info\030\004 \003(\0132\033.FwmRcPro"
    "to.GpuResourceInfo\"\211\001\n%EachModuleRequest"
    "OrReturnResourceInfo\022/\n\'resource_request"
    "_or_return_to_module_id\030\001 \002(\r\022/\n\rresourc"
    "e_info\030\002 \001(\0132\030.FwmRcProto.ResourceInfo\"&"
    "\n\nNetAddress\022\n\n\002ip\030\001 \002(\t\022\014\n\004port\030\002 \001(\r\"\231"
    "\001\n\010Register\022B\n\027framework_instance_info\030\001"
    " \002(\0132!.FwmRcProto.FrameworkInstanceInfo\022"
    "\026\n\016self_module_id\030\002 \002(\r\0221\n\021data_search_e"
    "ntry\030\003 \001(\0132\026.FwmRcProto.NetAddress\"!\n\013Re"
    "gisterAck\022\022\n\nstatuscode\030\001 \002(\005\"\211\001\n\026EachMo"
    "duleResourceInfo\022\031\n\021start_module_name\030\001 "
    "\002(\t\022\n\n\002ip\030\002 \002(\t\022/\n\rresource_info\030\003 \001(\0132\030"
    ".FwmRcProto.ResourceInfo\022\027\n\017listen_port_"
    "num\030\004 \001(\r\"\350\001\n\021RequestStartSlave\022B\n\027frame"
    "work_instance_info\030\001 \002(\0132!.FwmRcProto.Fr"
    "ameworkInstanceInfo\022\026\n\016self_module_id\030\002 "
    "\002(\r\022F\n\032start_module_resource_info\030\003 \003(\0132"
    "\".FwmRcProto.EachModuleResourceInfo\022/\n\017F"
    "WM_net_address\030\004 \001(\0132\026.FwmRcProto.NetAdd"
    "ress\"=\n\024RequestStartSlaveAck\022\022\n\nstatusco"
    "de\030\001 \002(\005\022\021\n\tmodule_id\030\002 \003(\r\"\306\001\n\023RequestT"
    "askResource\022B\n\027framework_instance_info\030\001"
    " \002(\0132!.FwmRcProto.FrameworkInstanceInfo\022"
    "\026\n\016self_module_id\030\002 \002(\r\022S\n\030module_add_re"
    "source_info\030\003 \003(\01321.FwmRcProto.EachModul"
    "eRequestOrReturnResourceInfo\"F\n\026RequestT"
    "askResourceAck\022\022\n\nstatuscode\030\001 \002(\005\022\030\n\020ex"
    "ceed_module_id\030\002 \003(\r\"\310\001\n\022ReturnTaskResou"
    "rce\022B\n\027framework_instance_info\030\001 \002(\0132!.F"
    "wmRcProto.FrameworkInstanceInfo\022\026\n\016self_"
    "module_id\030\002 \002(\r\022V\n\033module_return_resourc"
    "e_info\030\003 \003(\01321.FwmRcProto.EachModuleRequ"
    "estOrReturnResourceInfo\"+\n\025ReturnTaskRes"
    "ourceAck\022\022\n\nstatuscode\030\001 \002(\005\"\200\001\n\nStopMod"
    "ule\022B\n\027framework_instance_info\030\001 \002(\0132!.F"
    "wmRcProto.FrameworkInstanceInfo\022\026\n\016self_"
    "module_id\030\002 \002(\r\022\026\n\016stop_module_id\030\003 \003(\r\""
    ";\n\rStopModuleAck\022\022\n\nstatuscode\030\001 \002(\005\022\026\n\016"
    "stop_module_id\030\002 \003(\r\"k\n\rHeartBeatInfo\022B\n"
    "\027framework_instance_info\030\001 \002(\0132!.FwmRcPr"
    "oto.FrameworkInstanceInfo\022\026\n\016self_module"
    "_id\030\002 \002(\r\"&\n\020HeartBeatInfoAck\022\022\n\nstatusc"
    "ode\030\001 \002(\005\"x\n\032CloseFrameworkInstanceInfo\022"
    "B\n\027framework_instance_info\030\001 \002(\0132!.FwmRc"
    "Proto.FrameworkInstanceInfo\022\026\n\016self_modu"
    "le_id\030\002 \002(\r\"3\n\035CloseFrameworkInstanceInf"
    "oAck\022\022\n\nstatuscode\030\001 \002(\005", 2144);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FwmRcProtocol.proto", &protobuf_RegisterTypes);
  FrameworkInstanceInfo::default_instance_ = new FrameworkInstanceInfo();
  GpuResourceInfo::default_instance_ = new GpuResourceInfo();
  ResourceInfo::default_instance_ = new ResourceInfo();
  EachModuleRequestOrReturnResourceInfo::default_instance_ = new EachModuleRequestOrReturnResourceInfo();
  NetAddress::default_instance_ = new NetAddress();
  Register::default_instance_ = new Register();
  RegisterAck::default_instance_ = new RegisterAck();
  EachModuleResourceInfo::default_instance_ = new EachModuleResourceInfo();
  RequestStartSlave::default_instance_ = new RequestStartSlave();
  RequestStartSlaveAck::default_instance_ = new RequestStartSlaveAck();
  RequestTaskResource::default_instance_ = new RequestTaskResource();
  RequestTaskResourceAck::default_instance_ = new RequestTaskResourceAck();
  ReturnTaskResource::default_instance_ = new ReturnTaskResource();
  ReturnTaskResourceAck::default_instance_ = new ReturnTaskResourceAck();
  StopModule::default_instance_ = new StopModule();
  StopModuleAck::default_instance_ = new StopModuleAck();
  HeartBeatInfo::default_instance_ = new HeartBeatInfo();
  HeartBeatInfoAck::default_instance_ = new HeartBeatInfoAck();
  CloseFrameworkInstanceInfo::default_instance_ = new CloseFrameworkInstanceInfo();
  CloseFrameworkInstanceInfoAck::default_instance_ = new CloseFrameworkInstanceInfoAck();
  FrameworkInstanceInfo::default_instance_->InitAsDefaultInstance();
  GpuResourceInfo::default_instance_->InitAsDefaultInstance();
  ResourceInfo::default_instance_->InitAsDefaultInstance();
  EachModuleRequestOrReturnResourceInfo::default_instance_->InitAsDefaultInstance();
  NetAddress::default_instance_->InitAsDefaultInstance();
  Register::default_instance_->InitAsDefaultInstance();
  RegisterAck::default_instance_->InitAsDefaultInstance();
  EachModuleResourceInfo::default_instance_->InitAsDefaultInstance();
  RequestStartSlave::default_instance_->InitAsDefaultInstance();
  RequestStartSlaveAck::default_instance_->InitAsDefaultInstance();
  RequestTaskResource::default_instance_->InitAsDefaultInstance();
  RequestTaskResourceAck::default_instance_->InitAsDefaultInstance();
  ReturnTaskResource::default_instance_->InitAsDefaultInstance();
  ReturnTaskResourceAck::default_instance_->InitAsDefaultInstance();
  StopModule::default_instance_->InitAsDefaultInstance();
  StopModuleAck::default_instance_->InitAsDefaultInstance();
  HeartBeatInfo::default_instance_->InitAsDefaultInstance();
  HeartBeatInfoAck::default_instance_->InitAsDefaultInstance();
  CloseFrameworkInstanceInfo::default_instance_->InitAsDefaultInstance();
  CloseFrameworkInstanceInfoAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FwmRcProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FwmRcProtocol_2eproto {
  StaticDescriptorInitializer_FwmRcProtocol_2eproto() {
    protobuf_AddDesc_FwmRcProtocol_2eproto();
  }
} static_descriptor_initializer_FwmRcProtocol_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FrameworkInstanceInfo::kFrameworkIdFieldNumber;
const int FrameworkInstanceInfo::kFrameworkInstanceIdFieldNumber;
#endif  // !_MSC_VER

FrameworkInstanceInfo::FrameworkInstanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkInstanceInfo::InitAsDefaultInstance() {
}

FrameworkInstanceInfo::FrameworkInstanceInfo(const FrameworkInstanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkInstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_id_ = 0u;
  framework_instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkInstanceInfo::~FrameworkInstanceInfo() {
  SharedDtor();
}

void FrameworkInstanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameworkInstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkInstanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkInstanceInfo_descriptor_;
}

const FrameworkInstanceInfo& FrameworkInstanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

FrameworkInstanceInfo* FrameworkInstanceInfo::default_instance_ = NULL;

FrameworkInstanceInfo* FrameworkInstanceInfo::New() const {
  return new FrameworkInstanceInfo;
}

void FrameworkInstanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framework_id_ = 0u;
    framework_instance_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkInstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framework_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_id_)));
          set_has_framework_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_framework_instance_id;
        break;
      }
      
      // required uint32 framework_instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_framework_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_instance_id_)));
          set_has_framework_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkInstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framework_id(), output);
  }
  
  // required uint32 framework_instance_id = 2;
  if (has_framework_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->framework_instance_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkInstanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framework_id(), target);
  }
  
  // required uint32 framework_instance_id = 2;
  if (has_framework_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->framework_instance_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkInstanceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 framework_id = 1;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_id());
    }
    
    // required uint32 framework_instance_id = 2;
    if (has_framework_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_instance_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkInstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkInstanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkInstanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkInstanceInfo::MergeFrom(const FrameworkInstanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_id()) {
      set_framework_id(from.framework_id());
    }
    if (from.has_framework_instance_id()) {
      set_framework_instance_id(from.framework_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkInstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkInstanceInfo::CopyFrom(const FrameworkInstanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkInstanceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FrameworkInstanceInfo::Swap(FrameworkInstanceInfo* other) {
  if (other != this) {
    std::swap(framework_id_, other->framework_id_);
    std::swap(framework_instance_id_, other->framework_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkInstanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkInstanceInfo_descriptor_;
  metadata.reflection = FrameworkInstanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GpuResourceInfo::kGpuNameFieldNumber;
const int GpuResourceInfo::kGpuMemSizeFieldNumber;
#endif  // !_MSC_VER

GpuResourceInfo::GpuResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GpuResourceInfo::InitAsDefaultInstance() {
}

GpuResourceInfo::GpuResourceInfo(const GpuResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GpuResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  gpu_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gpu_mem_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpuResourceInfo::~GpuResourceInfo() {
  SharedDtor();
}

void GpuResourceInfo::SharedDtor() {
  if (gpu_name_ != &::google::protobuf::internal::kEmptyString) {
    delete gpu_name_;
  }
  if (this != default_instance_) {
  }
}

void GpuResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpuResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpuResourceInfo_descriptor_;
}

const GpuResourceInfo& GpuResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

GpuResourceInfo* GpuResourceInfo::default_instance_ = NULL;

GpuResourceInfo* GpuResourceInfo::New() const {
  return new GpuResourceInfo;
}

void GpuResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gpu_name()) {
      if (gpu_name_ != &::google::protobuf::internal::kEmptyString) {
        gpu_name_->clear();
      }
    }
    gpu_mem_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpuResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gpu_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpu_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpu_name().data(), this->gpu_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gpu_mem_size;
        break;
      }
      
      // optional uint32 gpu_mem_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_mem_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpu_mem_size_)));
          set_has_gpu_mem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GpuResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string gpu_name = 1;
  if (has_gpu_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpu_name().data(), this->gpu_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gpu_name(), output);
  }
  
  // optional uint32 gpu_mem_size = 2;
  if (has_gpu_mem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gpu_mem_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GpuResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string gpu_name = 1;
  if (has_gpu_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpu_name().data(), this->gpu_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gpu_name(), target);
  }
  
  // optional uint32 gpu_mem_size = 2;
  if (has_gpu_mem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gpu_mem_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GpuResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gpu_name = 1;
    if (has_gpu_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpu_name());
    }
    
    // optional uint32 gpu_mem_size = 2;
    if (has_gpu_mem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpu_mem_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpuResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpuResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GpuResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpuResourceInfo::MergeFrom(const GpuResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gpu_name()) {
      set_gpu_name(from.gpu_name());
    }
    if (from.has_gpu_mem_size()) {
      set_gpu_mem_size(from.gpu_mem_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpuResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpuResourceInfo::CopyFrom(const GpuResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GpuResourceInfo::Swap(GpuResourceInfo* other) {
  if (other != this) {
    std::swap(gpu_name_, other->gpu_name_);
    std::swap(gpu_mem_size_, other->gpu_mem_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GpuResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GpuResourceInfo_descriptor_;
  metadata.reflection = GpuResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceInfo::kCpuNumFieldNumber;
const int ResourceInfo::kCpuMemSizeFieldNumber;
const int ResourceInfo::kGpuNumFieldNumber;
const int ResourceInfo::kGpuResourceInfoFieldNumber;
#endif  // !_MSC_VER

ResourceInfo::ResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceInfo::InitAsDefaultInstance() {
}

ResourceInfo::ResourceInfo(const ResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  cpu_num_ = 0;
  cpu_mem_size_ = 0u;
  gpu_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceInfo::~ResourceInfo() {
  SharedDtor();
}

void ResourceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceInfo_descriptor_;
}

const ResourceInfo& ResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

ResourceInfo* ResourceInfo::default_instance_ = NULL;

ResourceInfo* ResourceInfo::New() const {
  return new ResourceInfo;
}

void ResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cpu_num_ = 0;
    cpu_mem_size_ = 0u;
    gpu_num_ = 0u;
  }
  gpu_resource_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double cpu_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_num_)));
          set_has_cpu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cpu_mem_size;
        break;
      }
      
      // required uint32 cpu_mem_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_mem_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_mem_size_)));
          set_has_cpu_mem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gpu_num;
        break;
      }
      
      // optional uint32 gpu_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpu_num_)));
          set_has_gpu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gpu_resource_info;
        break;
      }
      
      // repeated .FwmRcProto.GpuResourceInfo gpu_resource_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpu_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gpu_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gpu_resource_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double cpu_num = 1;
  if (has_cpu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cpu_num(), output);
  }
  
  // required uint32 cpu_mem_size = 2;
  if (has_cpu_mem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cpu_mem_size(), output);
  }
  
  // optional uint32 gpu_num = 3;
  if (has_gpu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gpu_num(), output);
  }
  
  // repeated .FwmRcProto.GpuResourceInfo gpu_resource_info = 4;
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gpu_resource_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double cpu_num = 1;
  if (has_cpu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cpu_num(), target);
  }
  
  // required uint32 cpu_mem_size = 2;
  if (has_cpu_mem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cpu_mem_size(), target);
  }
  
  // optional uint32 gpu_num = 3;
  if (has_gpu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gpu_num(), target);
  }
  
  // repeated .FwmRcProto.GpuResourceInfo gpu_resource_info = 4;
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gpu_resource_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double cpu_num = 1;
    if (has_cpu_num()) {
      total_size += 1 + 8;
    }
    
    // required uint32 cpu_mem_size = 2;
    if (has_cpu_mem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_mem_size());
    }
    
    // optional uint32 gpu_num = 3;
    if (has_gpu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpu_num());
    }
    
  }
  // repeated .FwmRcProto.GpuResourceInfo gpu_resource_info = 4;
  total_size += 1 * this->gpu_resource_info_size();
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gpu_resource_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceInfo::MergeFrom(const ResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gpu_resource_info_.MergeFrom(from.gpu_resource_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_num()) {
      set_cpu_num(from.cpu_num());
    }
    if (from.has_cpu_mem_size()) {
      set_cpu_mem_size(from.cpu_mem_size());
    }
    if (from.has_gpu_num()) {
      set_gpu_num(from.gpu_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceInfo::CopyFrom(const ResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < gpu_resource_info_size(); i++) {
    if (!this->gpu_resource_info(i).IsInitialized()) return false;
  }
  return true;
}

void ResourceInfo::Swap(ResourceInfo* other) {
  if (other != this) {
    std::swap(cpu_num_, other->cpu_num_);
    std::swap(cpu_mem_size_, other->cpu_mem_size_);
    std::swap(gpu_num_, other->gpu_num_);
    gpu_resource_info_.Swap(&other->gpu_resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceInfo_descriptor_;
  metadata.reflection = ResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EachModuleRequestOrReturnResourceInfo::kResourceRequestOrReturnToModuleIdFieldNumber;
const int EachModuleRequestOrReturnResourceInfo::kResourceInfoFieldNumber;
#endif  // !_MSC_VER

EachModuleRequestOrReturnResourceInfo::EachModuleRequestOrReturnResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EachModuleRequestOrReturnResourceInfo::InitAsDefaultInstance() {
  resource_info_ = const_cast< ::FwmRcProto::ResourceInfo*>(&::FwmRcProto::ResourceInfo::default_instance());
}

EachModuleRequestOrReturnResourceInfo::EachModuleRequestOrReturnResourceInfo(const EachModuleRequestOrReturnResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EachModuleRequestOrReturnResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  resource_request_or_return_to_module_id_ = 0u;
  resource_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EachModuleRequestOrReturnResourceInfo::~EachModuleRequestOrReturnResourceInfo() {
  SharedDtor();
}

void EachModuleRequestOrReturnResourceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete resource_info_;
  }
}

void EachModuleRequestOrReturnResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EachModuleRequestOrReturnResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EachModuleRequestOrReturnResourceInfo_descriptor_;
}

const EachModuleRequestOrReturnResourceInfo& EachModuleRequestOrReturnResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

EachModuleRequestOrReturnResourceInfo* EachModuleRequestOrReturnResourceInfo::default_instance_ = NULL;

EachModuleRequestOrReturnResourceInfo* EachModuleRequestOrReturnResourceInfo::New() const {
  return new EachModuleRequestOrReturnResourceInfo;
}

void EachModuleRequestOrReturnResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resource_request_or_return_to_module_id_ = 0u;
    if (has_resource_info()) {
      if (resource_info_ != NULL) resource_info_->::FwmRcProto::ResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EachModuleRequestOrReturnResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 resource_request_or_return_to_module_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resource_request_or_return_to_module_id_)));
          set_has_resource_request_or_return_to_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource_info;
        break;
      }
      
      // optional .FwmRcProto.ResourceInfo resource_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EachModuleRequestOrReturnResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 resource_request_or_return_to_module_id = 1;
  if (has_resource_request_or_return_to_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resource_request_or_return_to_module_id(), output);
  }
  
  // optional .FwmRcProto.ResourceInfo resource_info = 2;
  if (has_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resource_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EachModuleRequestOrReturnResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 resource_request_or_return_to_module_id = 1;
  if (has_resource_request_or_return_to_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resource_request_or_return_to_module_id(), target);
  }
  
  // optional .FwmRcProto.ResourceInfo resource_info = 2;
  if (has_resource_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resource_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EachModuleRequestOrReturnResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 resource_request_or_return_to_module_id = 1;
    if (has_resource_request_or_return_to_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resource_request_or_return_to_module_id());
    }
    
    // optional .FwmRcProto.ResourceInfo resource_info = 2;
    if (has_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EachModuleRequestOrReturnResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EachModuleRequestOrReturnResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EachModuleRequestOrReturnResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EachModuleRequestOrReturnResourceInfo::MergeFrom(const EachModuleRequestOrReturnResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource_request_or_return_to_module_id()) {
      set_resource_request_or_return_to_module_id(from.resource_request_or_return_to_module_id());
    }
    if (from.has_resource_info()) {
      mutable_resource_info()->::FwmRcProto::ResourceInfo::MergeFrom(from.resource_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EachModuleRequestOrReturnResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EachModuleRequestOrReturnResourceInfo::CopyFrom(const EachModuleRequestOrReturnResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EachModuleRequestOrReturnResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_resource_info()) {
    if (!this->resource_info().IsInitialized()) return false;
  }
  return true;
}

void EachModuleRequestOrReturnResourceInfo::Swap(EachModuleRequestOrReturnResourceInfo* other) {
  if (other != this) {
    std::swap(resource_request_or_return_to_module_id_, other->resource_request_or_return_to_module_id_);
    std::swap(resource_info_, other->resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EachModuleRequestOrReturnResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EachModuleRequestOrReturnResourceInfo_descriptor_;
  metadata.reflection = EachModuleRequestOrReturnResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetAddress::kIpFieldNumber;
const int NetAddress::kPortFieldNumber;
#endif  // !_MSC_VER

NetAddress::NetAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetAddress::InitAsDefaultInstance() {
}

NetAddress::NetAddress(const NetAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetAddress::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetAddress::~NetAddress() {
  SharedDtor();
}

void NetAddress::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void NetAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetAddress_descriptor_;
}

const NetAddress& NetAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

NetAddress* NetAddress::default_instance_ = NULL;

NetAddress* NetAddress::New() const {
  return new NetAddress;
}

void NetAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetAddress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetAddress::MergeFrom(const NetAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetAddress::CopyFrom(const NetAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NetAddress::Swap(NetAddress* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetAddress_descriptor_;
  metadata.reflection = NetAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Register::kFrameworkInstanceInfoFieldNumber;
const int Register::kSelfModuleIdFieldNumber;
const int Register::kDataSearchEntryFieldNumber;
#endif  // !_MSC_VER

Register::Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Register::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
  data_search_entry_ = const_cast< ::FwmRcProto::NetAddress*>(&::FwmRcProto::NetAddress::default_instance());
}

Register::Register(const Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Register::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  self_module_id_ = 0u;
  data_search_entry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register::~Register() {
  SharedDtor();
}

void Register::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_info_;
    delete data_search_entry_;
  }
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_descriptor_;
}

const Register& Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

Register* Register::default_instance_ = NULL;

Register* Register::New() const {
  return new Register;
}

void Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
    self_module_id_ = 0u;
    if (has_data_search_entry()) {
      if (data_search_entry_ != NULL) data_search_entry_->::FwmRcProto::NetAddress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_module_id;
        break;
      }
      
      // required uint32 self_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_module_id_)));
          set_has_self_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data_search_entry;
        break;
      }
      
      // optional .FwmRcProto.NetAddress data_search_entry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_search_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_search_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->self_module_id(), output);
  }
  
  // optional .FwmRcProto.NetAddress data_search_entry = 3;
  if (has_data_search_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data_search_entry(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->self_module_id(), target);
  }
  
  // optional .FwmRcProto.NetAddress data_search_entry = 3;
  if (has_data_search_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data_search_entry(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Register::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }
    
    // required uint32 self_module_id = 2;
    if (has_self_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_module_id());
    }
    
    // optional .FwmRcProto.NetAddress data_search_entry = 3;
    if (has_data_search_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_search_entry());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Register::MergeFrom(const Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_self_module_id()) {
      set_self_module_id(from.self_module_id());
    }
    if (from.has_data_search_entry()) {
      mutable_data_search_entry()->::FwmRcProto::NetAddress::MergeFrom(from.data_search_entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register::CopyFrom(const Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  if (has_data_search_entry()) {
    if (!this->data_search_entry().IsInitialized()) return false;
  }
  return true;
}

void Register::Swap(Register* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(self_module_id_, other->self_module_id_);
    std::swap(data_search_entry_, other->data_search_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_descriptor_;
  metadata.reflection = Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterAck::kStatuscodeFieldNumber;
#endif  // !_MSC_VER

RegisterAck::RegisterAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterAck::InitAsDefaultInstance() {
}

RegisterAck::RegisterAck(const RegisterAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterAck::SharedCtor() {
  _cached_size_ = 0;
  statuscode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterAck::~RegisterAck() {
  SharedDtor();
}

void RegisterAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterAck_descriptor_;
}

const RegisterAck& RegisterAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

RegisterAck* RegisterAck::default_instance_ = NULL;

RegisterAck* RegisterAck::New() const {
  return new RegisterAck;
}

void RegisterAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statuscode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statuscode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statuscode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterAck::MergeFrom(const RegisterAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAck::CopyFrom(const RegisterAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RegisterAck::Swap(RegisterAck* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterAck_descriptor_;
  metadata.reflection = RegisterAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EachModuleResourceInfo::kStartModuleNameFieldNumber;
const int EachModuleResourceInfo::kIpFieldNumber;
const int EachModuleResourceInfo::kResourceInfoFieldNumber;
const int EachModuleResourceInfo::kListenPortNumFieldNumber;
#endif  // !_MSC_VER

EachModuleResourceInfo::EachModuleResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EachModuleResourceInfo::InitAsDefaultInstance() {
  resource_info_ = const_cast< ::FwmRcProto::ResourceInfo*>(&::FwmRcProto::ResourceInfo::default_instance());
}

EachModuleResourceInfo::EachModuleResourceInfo(const EachModuleResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EachModuleResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  start_module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_info_ = NULL;
  listen_port_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EachModuleResourceInfo::~EachModuleResourceInfo() {
  SharedDtor();
}

void EachModuleResourceInfo::SharedDtor() {
  if (start_module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete start_module_name_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete resource_info_;
  }
}

void EachModuleResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EachModuleResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EachModuleResourceInfo_descriptor_;
}

const EachModuleResourceInfo& EachModuleResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

EachModuleResourceInfo* EachModuleResourceInfo::default_instance_ = NULL;

EachModuleResourceInfo* EachModuleResourceInfo::New() const {
  return new EachModuleResourceInfo;
}

void EachModuleResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start_module_name()) {
      if (start_module_name_ != &::google::protobuf::internal::kEmptyString) {
        start_module_name_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_resource_info()) {
      if (resource_info_ != NULL) resource_info_->::FwmRcProto::ResourceInfo::Clear();
    }
    listen_port_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EachModuleResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string start_module_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_module_name().data(), this->start_module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resource_info;
        break;
      }
      
      // optional .FwmRcProto.ResourceInfo resource_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_listen_port_num;
        break;
      }
      
      // optional uint32 listen_port_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_port_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_port_num_)));
          set_has_listen_port_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EachModuleResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string start_module_name = 1;
  if (has_start_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_module_name().data(), this->start_module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->start_module_name(), output);
  }
  
  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }
  
  // optional .FwmRcProto.ResourceInfo resource_info = 3;
  if (has_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resource_info(), output);
  }
  
  // optional uint32 listen_port_num = 4;
  if (has_listen_port_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->listen_port_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EachModuleResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string start_module_name = 1;
  if (has_start_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_module_name().data(), this->start_module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->start_module_name(), target);
  }
  
  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }
  
  // optional .FwmRcProto.ResourceInfo resource_info = 3;
  if (has_resource_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resource_info(), target);
  }
  
  // optional uint32 listen_port_num = 4;
  if (has_listen_port_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->listen_port_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EachModuleResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string start_module_name = 1;
    if (has_start_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_module_name());
    }
    
    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional .FwmRcProto.ResourceInfo resource_info = 3;
    if (has_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_info());
    }
    
    // optional uint32 listen_port_num = 4;
    if (has_listen_port_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_port_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EachModuleResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EachModuleResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EachModuleResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EachModuleResourceInfo::MergeFrom(const EachModuleResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_module_name()) {
      set_start_module_name(from.start_module_name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_resource_info()) {
      mutable_resource_info()->::FwmRcProto::ResourceInfo::MergeFrom(from.resource_info());
    }
    if (from.has_listen_port_num()) {
      set_listen_port_num(from.listen_port_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EachModuleResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EachModuleResourceInfo::CopyFrom(const EachModuleResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EachModuleResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_resource_info()) {
    if (!this->resource_info().IsInitialized()) return false;
  }
  return true;
}

void EachModuleResourceInfo::Swap(EachModuleResourceInfo* other) {
  if (other != this) {
    std::swap(start_module_name_, other->start_module_name_);
    std::swap(ip_, other->ip_);
    std::swap(resource_info_, other->resource_info_);
    std::swap(listen_port_num_, other->listen_port_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EachModuleResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EachModuleResourceInfo_descriptor_;
  metadata.reflection = EachModuleResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestStartSlave::kFrameworkInstanceInfoFieldNumber;
const int RequestStartSlave::kSelfModuleIdFieldNumber;
const int RequestStartSlave::kStartModuleResourceInfoFieldNumber;
const int RequestStartSlave::kFWMNetAddressFieldNumber;
#endif  // !_MSC_VER

RequestStartSlave::RequestStartSlave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestStartSlave::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
  fwm_net_address_ = const_cast< ::FwmRcProto::NetAddress*>(&::FwmRcProto::NetAddress::default_instance());
}

RequestStartSlave::RequestStartSlave(const RequestStartSlave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestStartSlave::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  self_module_id_ = 0u;
  fwm_net_address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStartSlave::~RequestStartSlave() {
  SharedDtor();
}

void RequestStartSlave::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_info_;
    delete fwm_net_address_;
  }
}

void RequestStartSlave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStartSlave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStartSlave_descriptor_;
}

const RequestStartSlave& RequestStartSlave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

RequestStartSlave* RequestStartSlave::default_instance_ = NULL;

RequestStartSlave* RequestStartSlave::New() const {
  return new RequestStartSlave;
}

void RequestStartSlave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
    self_module_id_ = 0u;
    if (has_fwm_net_address()) {
      if (fwm_net_address_ != NULL) fwm_net_address_->::FwmRcProto::NetAddress::Clear();
    }
  }
  start_module_resource_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestStartSlave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_module_id;
        break;
      }
      
      // required uint32 self_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_module_id_)));
          set_has_self_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_module_resource_info;
        break;
      }
      
      // repeated .FwmRcProto.EachModuleResourceInfo start_module_resource_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_module_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_start_module_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_module_resource_info;
        if (input->ExpectTag(34)) goto parse_FWM_net_address;
        break;
      }
      
      // optional .FwmRcProto.NetAddress FWM_net_address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FWM_net_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fwm_net_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestStartSlave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->self_module_id(), output);
  }
  
  // repeated .FwmRcProto.EachModuleResourceInfo start_module_resource_info = 3;
  for (int i = 0; i < this->start_module_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->start_module_resource_info(i), output);
  }
  
  // optional .FwmRcProto.NetAddress FWM_net_address = 4;
  if (has_fwm_net_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fwm_net_address(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestStartSlave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->self_module_id(), target);
  }
  
  // repeated .FwmRcProto.EachModuleResourceInfo start_module_resource_info = 3;
  for (int i = 0; i < this->start_module_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->start_module_resource_info(i), target);
  }
  
  // optional .FwmRcProto.NetAddress FWM_net_address = 4;
  if (has_fwm_net_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fwm_net_address(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestStartSlave::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }
    
    // required uint32 self_module_id = 2;
    if (has_self_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_module_id());
    }
    
    // optional .FwmRcProto.NetAddress FWM_net_address = 4;
    if (has_fwm_net_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fwm_net_address());
    }
    
  }
  // repeated .FwmRcProto.EachModuleResourceInfo start_module_resource_info = 3;
  total_size += 1 * this->start_module_resource_info_size();
  for (int i = 0; i < this->start_module_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->start_module_resource_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStartSlave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestStartSlave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestStartSlave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestStartSlave::MergeFrom(const RequestStartSlave& from) {
  GOOGLE_CHECK_NE(&from, this);
  start_module_resource_info_.MergeFrom(from.start_module_resource_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_self_module_id()) {
      set_self_module_id(from.self_module_id());
    }
    if (from.has_fwm_net_address()) {
      mutable_fwm_net_address()->::FwmRcProto::NetAddress::MergeFrom(from.fwm_net_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestStartSlave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStartSlave::CopyFrom(const RequestStartSlave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStartSlave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  for (int i = 0; i < start_module_resource_info_size(); i++) {
    if (!this->start_module_resource_info(i).IsInitialized()) return false;
  }
  if (has_fwm_net_address()) {
    if (!this->fwm_net_address().IsInitialized()) return false;
  }
  return true;
}

void RequestStartSlave::Swap(RequestStartSlave* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(self_module_id_, other->self_module_id_);
    start_module_resource_info_.Swap(&other->start_module_resource_info_);
    std::swap(fwm_net_address_, other->fwm_net_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestStartSlave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStartSlave_descriptor_;
  metadata.reflection = RequestStartSlave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestStartSlaveAck::kStatuscodeFieldNumber;
const int RequestStartSlaveAck::kModuleIdFieldNumber;
#endif  // !_MSC_VER

RequestStartSlaveAck::RequestStartSlaveAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestStartSlaveAck::InitAsDefaultInstance() {
}

RequestStartSlaveAck::RequestStartSlaveAck(const RequestStartSlaveAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestStartSlaveAck::SharedCtor() {
  _cached_size_ = 0;
  statuscode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStartSlaveAck::~RequestStartSlaveAck() {
  SharedDtor();
}

void RequestStartSlaveAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestStartSlaveAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStartSlaveAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStartSlaveAck_descriptor_;
}

const RequestStartSlaveAck& RequestStartSlaveAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

RequestStartSlaveAck* RequestStartSlaveAck::default_instance_ = NULL;

RequestStartSlaveAck* RequestStartSlaveAck::New() const {
  return new RequestStartSlaveAck;
}

void RequestStartSlaveAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statuscode_ = 0;
  }
  module_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestStartSlaveAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statuscode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_module_id;
        break;
      }
      
      // repeated uint32 module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_module_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_module_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_module_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestStartSlaveAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }
  
  // repeated uint32 module_id = 2;
  for (int i = 0; i < this->module_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->module_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestStartSlaveAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }
  
  // repeated uint32 module_id = 2;
  for (int i = 0; i < this->module_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->module_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestStartSlaveAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statuscode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }
    
  }
  // repeated uint32 module_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->module_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->module_id(i));
    }
    total_size += 1 * this->module_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStartSlaveAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestStartSlaveAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestStartSlaveAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestStartSlaveAck::MergeFrom(const RequestStartSlaveAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  module_id_.MergeFrom(from.module_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestStartSlaveAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStartSlaveAck::CopyFrom(const RequestStartSlaveAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStartSlaveAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestStartSlaveAck::Swap(RequestStartSlaveAck* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    module_id_.Swap(&other->module_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestStartSlaveAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStartSlaveAck_descriptor_;
  metadata.reflection = RequestStartSlaveAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTaskResource::kFrameworkInstanceInfoFieldNumber;
const int RequestTaskResource::kSelfModuleIdFieldNumber;
const int RequestTaskResource::kModuleAddResourceInfoFieldNumber;
#endif  // !_MSC_VER

RequestTaskResource::RequestTaskResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestTaskResource::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
}

RequestTaskResource::RequestTaskResource(const RequestTaskResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTaskResource::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  self_module_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTaskResource::~RequestTaskResource() {
  SharedDtor();
}

void RequestTaskResource::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_info_;
  }
}

void RequestTaskResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTaskResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTaskResource_descriptor_;
}

const RequestTaskResource& RequestTaskResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

RequestTaskResource* RequestTaskResource::default_instance_ = NULL;

RequestTaskResource* RequestTaskResource::New() const {
  return new RequestTaskResource;
}

void RequestTaskResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
    self_module_id_ = 0u;
  }
  module_add_resource_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTaskResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_module_id;
        break;
      }
      
      // required uint32 self_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_module_id_)));
          set_has_self_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_module_add_resource_info;
        break;
      }
      
      // repeated .FwmRcProto.EachModuleRequestOrReturnResourceInfo module_add_resource_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_add_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_module_add_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_module_add_resource_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTaskResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->self_module_id(), output);
  }
  
  // repeated .FwmRcProto.EachModuleRequestOrReturnResourceInfo module_add_resource_info = 3;
  for (int i = 0; i < this->module_add_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->module_add_resource_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestTaskResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->self_module_id(), target);
  }
  
  // repeated .FwmRcProto.EachModuleRequestOrReturnResourceInfo module_add_resource_info = 3;
  for (int i = 0; i < this->module_add_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->module_add_resource_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestTaskResource::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }
    
    // required uint32 self_module_id = 2;
    if (has_self_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_module_id());
    }
    
  }
  // repeated .FwmRcProto.EachModuleRequestOrReturnResourceInfo module_add_resource_info = 3;
  total_size += 1 * this->module_add_resource_info_size();
  for (int i = 0; i < this->module_add_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->module_add_resource_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTaskResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTaskResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTaskResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTaskResource::MergeFrom(const RequestTaskResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  module_add_resource_info_.MergeFrom(from.module_add_resource_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_self_module_id()) {
      set_self_module_id(from.self_module_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTaskResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTaskResource::CopyFrom(const RequestTaskResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTaskResource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  for (int i = 0; i < module_add_resource_info_size(); i++) {
    if (!this->module_add_resource_info(i).IsInitialized()) return false;
  }
  return true;
}

void RequestTaskResource::Swap(RequestTaskResource* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(self_module_id_, other->self_module_id_);
    module_add_resource_info_.Swap(&other->module_add_resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTaskResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTaskResource_descriptor_;
  metadata.reflection = RequestTaskResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTaskResourceAck::kStatuscodeFieldNumber;
const int RequestTaskResourceAck::kExceedModuleIdFieldNumber;
#endif  // !_MSC_VER

RequestTaskResourceAck::RequestTaskResourceAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestTaskResourceAck::InitAsDefaultInstance() {
}

RequestTaskResourceAck::RequestTaskResourceAck(const RequestTaskResourceAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTaskResourceAck::SharedCtor() {
  _cached_size_ = 0;
  statuscode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTaskResourceAck::~RequestTaskResourceAck() {
  SharedDtor();
}

void RequestTaskResourceAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestTaskResourceAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTaskResourceAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTaskResourceAck_descriptor_;
}

const RequestTaskResourceAck& RequestTaskResourceAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

RequestTaskResourceAck* RequestTaskResourceAck::default_instance_ = NULL;

RequestTaskResourceAck* RequestTaskResourceAck::New() const {
  return new RequestTaskResourceAck;
}

void RequestTaskResourceAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statuscode_ = 0;
  }
  exceed_module_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTaskResourceAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statuscode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exceed_module_id;
        break;
      }
      
      // repeated uint32 exceed_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exceed_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_exceed_module_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exceed_module_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exceed_module_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTaskResourceAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }
  
  // repeated uint32 exceed_module_id = 2;
  for (int i = 0; i < this->exceed_module_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->exceed_module_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestTaskResourceAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }
  
  // repeated uint32 exceed_module_id = 2;
  for (int i = 0; i < this->exceed_module_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->exceed_module_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestTaskResourceAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statuscode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }
    
  }
  // repeated uint32 exceed_module_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->exceed_module_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->exceed_module_id(i));
    }
    total_size += 1 * this->exceed_module_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTaskResourceAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTaskResourceAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTaskResourceAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTaskResourceAck::MergeFrom(const RequestTaskResourceAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  exceed_module_id_.MergeFrom(from.exceed_module_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTaskResourceAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTaskResourceAck::CopyFrom(const RequestTaskResourceAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTaskResourceAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestTaskResourceAck::Swap(RequestTaskResourceAck* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    exceed_module_id_.Swap(&other->exceed_module_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTaskResourceAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTaskResourceAck_descriptor_;
  metadata.reflection = RequestTaskResourceAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnTaskResource::kFrameworkInstanceInfoFieldNumber;
const int ReturnTaskResource::kSelfModuleIdFieldNumber;
const int ReturnTaskResource::kModuleReturnResourceInfoFieldNumber;
#endif  // !_MSC_VER

ReturnTaskResource::ReturnTaskResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnTaskResource::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
}

ReturnTaskResource::ReturnTaskResource(const ReturnTaskResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnTaskResource::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  self_module_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnTaskResource::~ReturnTaskResource() {
  SharedDtor();
}

void ReturnTaskResource::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_info_;
  }
}

void ReturnTaskResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnTaskResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnTaskResource_descriptor_;
}

const ReturnTaskResource& ReturnTaskResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

ReturnTaskResource* ReturnTaskResource::default_instance_ = NULL;

ReturnTaskResource* ReturnTaskResource::New() const {
  return new ReturnTaskResource;
}

void ReturnTaskResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
    self_module_id_ = 0u;
  }
  module_return_resource_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnTaskResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_module_id;
        break;
      }
      
      // required uint32 self_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_module_id_)));
          set_has_self_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_module_return_resource_info;
        break;
      }
      
      // repeated .FwmRcProto.EachModuleRequestOrReturnResourceInfo module_return_resource_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_return_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_module_return_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_module_return_resource_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnTaskResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->self_module_id(), output);
  }
  
  // repeated .FwmRcProto.EachModuleRequestOrReturnResourceInfo module_return_resource_info = 3;
  for (int i = 0; i < this->module_return_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->module_return_resource_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnTaskResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->self_module_id(), target);
  }
  
  // repeated .FwmRcProto.EachModuleRequestOrReturnResourceInfo module_return_resource_info = 3;
  for (int i = 0; i < this->module_return_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->module_return_resource_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnTaskResource::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }
    
    // required uint32 self_module_id = 2;
    if (has_self_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_module_id());
    }
    
  }
  // repeated .FwmRcProto.EachModuleRequestOrReturnResourceInfo module_return_resource_info = 3;
  total_size += 1 * this->module_return_resource_info_size();
  for (int i = 0; i < this->module_return_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->module_return_resource_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnTaskResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnTaskResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnTaskResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnTaskResource::MergeFrom(const ReturnTaskResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  module_return_resource_info_.MergeFrom(from.module_return_resource_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_self_module_id()) {
      set_self_module_id(from.self_module_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnTaskResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnTaskResource::CopyFrom(const ReturnTaskResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnTaskResource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  for (int i = 0; i < module_return_resource_info_size(); i++) {
    if (!this->module_return_resource_info(i).IsInitialized()) return false;
  }
  return true;
}

void ReturnTaskResource::Swap(ReturnTaskResource* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(self_module_id_, other->self_module_id_);
    module_return_resource_info_.Swap(&other->module_return_resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnTaskResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnTaskResource_descriptor_;
  metadata.reflection = ReturnTaskResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnTaskResourceAck::kStatuscodeFieldNumber;
#endif  // !_MSC_VER

ReturnTaskResourceAck::ReturnTaskResourceAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnTaskResourceAck::InitAsDefaultInstance() {
}

ReturnTaskResourceAck::ReturnTaskResourceAck(const ReturnTaskResourceAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnTaskResourceAck::SharedCtor() {
  _cached_size_ = 0;
  statuscode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnTaskResourceAck::~ReturnTaskResourceAck() {
  SharedDtor();
}

void ReturnTaskResourceAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnTaskResourceAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnTaskResourceAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnTaskResourceAck_descriptor_;
}

const ReturnTaskResourceAck& ReturnTaskResourceAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

ReturnTaskResourceAck* ReturnTaskResourceAck::default_instance_ = NULL;

ReturnTaskResourceAck* ReturnTaskResourceAck::New() const {
  return new ReturnTaskResourceAck;
}

void ReturnTaskResourceAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statuscode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnTaskResourceAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statuscode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnTaskResourceAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnTaskResourceAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnTaskResourceAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statuscode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnTaskResourceAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnTaskResourceAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnTaskResourceAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnTaskResourceAck::MergeFrom(const ReturnTaskResourceAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnTaskResourceAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnTaskResourceAck::CopyFrom(const ReturnTaskResourceAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnTaskResourceAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReturnTaskResourceAck::Swap(ReturnTaskResourceAck* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnTaskResourceAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnTaskResourceAck_descriptor_;
  metadata.reflection = ReturnTaskResourceAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopModule::kFrameworkInstanceInfoFieldNumber;
const int StopModule::kSelfModuleIdFieldNumber;
const int StopModule::kStopModuleIdFieldNumber;
#endif  // !_MSC_VER

StopModule::StopModule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopModule::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
}

StopModule::StopModule(const StopModule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopModule::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  self_module_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopModule::~StopModule() {
  SharedDtor();
}

void StopModule::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_info_;
  }
}

void StopModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopModule_descriptor_;
}

const StopModule& StopModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

StopModule* StopModule::default_instance_ = NULL;

StopModule* StopModule::New() const {
  return new StopModule;
}

void StopModule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
    self_module_id_ = 0u;
  }
  stop_module_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_module_id;
        break;
      }
      
      // required uint32 self_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_module_id_)));
          set_has_self_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stop_module_id;
        break;
      }
      
      // repeated uint32 stop_module_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_stop_module_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stop_module_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stop_module_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->self_module_id(), output);
  }
  
  // repeated uint32 stop_module_id = 3;
  for (int i = 0; i < this->stop_module_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->stop_module_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->self_module_id(), target);
  }
  
  // repeated uint32 stop_module_id = 3;
  for (int i = 0; i < this->stop_module_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->stop_module_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopModule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }
    
    // required uint32 self_module_id = 2;
    if (has_self_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_module_id());
    }
    
  }
  // repeated uint32 stop_module_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->stop_module_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stop_module_id(i));
    }
    total_size += 1 * this->stop_module_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopModule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopModule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopModule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopModule::MergeFrom(const StopModule& from) {
  GOOGLE_CHECK_NE(&from, this);
  stop_module_id_.MergeFrom(from.stop_module_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_self_module_id()) {
      set_self_module_id(from.self_module_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopModule::CopyFrom(const StopModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopModule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  return true;
}

void StopModule::Swap(StopModule* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(self_module_id_, other->self_module_id_);
    stop_module_id_.Swap(&other->stop_module_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopModule_descriptor_;
  metadata.reflection = StopModule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopModuleAck::kStatuscodeFieldNumber;
const int StopModuleAck::kStopModuleIdFieldNumber;
#endif  // !_MSC_VER

StopModuleAck::StopModuleAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopModuleAck::InitAsDefaultInstance() {
}

StopModuleAck::StopModuleAck(const StopModuleAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopModuleAck::SharedCtor() {
  _cached_size_ = 0;
  statuscode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopModuleAck::~StopModuleAck() {
  SharedDtor();
}

void StopModuleAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopModuleAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopModuleAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopModuleAck_descriptor_;
}

const StopModuleAck& StopModuleAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

StopModuleAck* StopModuleAck::default_instance_ = NULL;

StopModuleAck* StopModuleAck::New() const {
  return new StopModuleAck;
}

void StopModuleAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statuscode_ = 0;
  }
  stop_module_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopModuleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statuscode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stop_module_id;
        break;
      }
      
      // repeated uint32 stop_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_stop_module_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stop_module_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stop_module_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopModuleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }
  
  // repeated uint32 stop_module_id = 2;
  for (int i = 0; i < this->stop_module_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->stop_module_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopModuleAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }
  
  // repeated uint32 stop_module_id = 2;
  for (int i = 0; i < this->stop_module_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->stop_module_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopModuleAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statuscode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }
    
  }
  // repeated uint32 stop_module_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->stop_module_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stop_module_id(i));
    }
    total_size += 1 * this->stop_module_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopModuleAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopModuleAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopModuleAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopModuleAck::MergeFrom(const StopModuleAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  stop_module_id_.MergeFrom(from.stop_module_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopModuleAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopModuleAck::CopyFrom(const StopModuleAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopModuleAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StopModuleAck::Swap(StopModuleAck* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    stop_module_id_.Swap(&other->stop_module_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopModuleAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopModuleAck_descriptor_;
  metadata.reflection = StopModuleAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeatInfo::kFrameworkInstanceInfoFieldNumber;
const int HeartBeatInfo::kSelfModuleIdFieldNumber;
#endif  // !_MSC_VER

HeartBeatInfo::HeartBeatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeatInfo::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
}

HeartBeatInfo::HeartBeatInfo(const HeartBeatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeatInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  self_module_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatInfo::~HeartBeatInfo() {
  SharedDtor();
}

void HeartBeatInfo::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_info_;
  }
}

void HeartBeatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatInfo_descriptor_;
}

const HeartBeatInfo& HeartBeatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

HeartBeatInfo* HeartBeatInfo::default_instance_ = NULL;

HeartBeatInfo* HeartBeatInfo::New() const {
  return new HeartBeatInfo;
}

void HeartBeatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
    self_module_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_module_id;
        break;
      }
      
      // required uint32 self_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_module_id_)));
          set_has_self_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartBeatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->self_module_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->self_module_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeatInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }
    
    // required uint32 self_module_id = 2;
    if (has_self_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_module_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatInfo::MergeFrom(const HeartBeatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_self_module_id()) {
      set_self_module_id(from.self_module_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatInfo::CopyFrom(const HeartBeatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  return true;
}

void HeartBeatInfo::Swap(HeartBeatInfo* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(self_module_id_, other->self_module_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatInfo_descriptor_;
  metadata.reflection = HeartBeatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeatInfoAck::kStatuscodeFieldNumber;
#endif  // !_MSC_VER

HeartBeatInfoAck::HeartBeatInfoAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeatInfoAck::InitAsDefaultInstance() {
}

HeartBeatInfoAck::HeartBeatInfoAck(const HeartBeatInfoAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeatInfoAck::SharedCtor() {
  _cached_size_ = 0;
  statuscode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatInfoAck::~HeartBeatInfoAck() {
  SharedDtor();
}

void HeartBeatInfoAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatInfoAck_descriptor_;
}

const HeartBeatInfoAck& HeartBeatInfoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

HeartBeatInfoAck* HeartBeatInfoAck::default_instance_ = NULL;

HeartBeatInfoAck* HeartBeatInfoAck::New() const {
  return new HeartBeatInfoAck;
}

void HeartBeatInfoAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statuscode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statuscode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartBeatInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeatInfoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeatInfoAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statuscode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatInfoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatInfoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatInfoAck::MergeFrom(const HeartBeatInfoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatInfoAck::CopyFrom(const HeartBeatInfoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatInfoAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HeartBeatInfoAck::Swap(HeartBeatInfoAck* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatInfoAck_descriptor_;
  metadata.reflection = HeartBeatInfoAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseFrameworkInstanceInfo::kFrameworkInstanceInfoFieldNumber;
const int CloseFrameworkInstanceInfo::kSelfModuleIdFieldNumber;
#endif  // !_MSC_VER

CloseFrameworkInstanceInfo::CloseFrameworkInstanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseFrameworkInstanceInfo::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::FwmRcProto::FrameworkInstanceInfo*>(&::FwmRcProto::FrameworkInstanceInfo::default_instance());
}

CloseFrameworkInstanceInfo::CloseFrameworkInstanceInfo(const CloseFrameworkInstanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseFrameworkInstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  self_module_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseFrameworkInstanceInfo::~CloseFrameworkInstanceInfo() {
  SharedDtor();
}

void CloseFrameworkInstanceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_info_;
  }
}

void CloseFrameworkInstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseFrameworkInstanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseFrameworkInstanceInfo_descriptor_;
}

const CloseFrameworkInstanceInfo& CloseFrameworkInstanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

CloseFrameworkInstanceInfo* CloseFrameworkInstanceInfo::default_instance_ = NULL;

CloseFrameworkInstanceInfo* CloseFrameworkInstanceInfo::New() const {
  return new CloseFrameworkInstanceInfo;
}

void CloseFrameworkInstanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::FwmRcProto::FrameworkInstanceInfo::Clear();
    }
    self_module_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseFrameworkInstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_module_id;
        break;
      }
      
      // required uint32 self_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_module_id_)));
          set_has_self_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseFrameworkInstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->self_module_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseFrameworkInstanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }
  
  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->self_module_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseFrameworkInstanceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FwmRcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }
    
    // required uint32 self_module_id = 2;
    if (has_self_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_module_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseFrameworkInstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseFrameworkInstanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseFrameworkInstanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseFrameworkInstanceInfo::MergeFrom(const CloseFrameworkInstanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::FwmRcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_self_module_id()) {
      set_self_module_id(from.self_module_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseFrameworkInstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseFrameworkInstanceInfo::CopyFrom(const CloseFrameworkInstanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseFrameworkInstanceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  return true;
}

void CloseFrameworkInstanceInfo::Swap(CloseFrameworkInstanceInfo* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(self_module_id_, other->self_module_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseFrameworkInstanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseFrameworkInstanceInfo_descriptor_;
  metadata.reflection = CloseFrameworkInstanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseFrameworkInstanceInfoAck::kStatuscodeFieldNumber;
#endif  // !_MSC_VER

CloseFrameworkInstanceInfoAck::CloseFrameworkInstanceInfoAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseFrameworkInstanceInfoAck::InitAsDefaultInstance() {
}

CloseFrameworkInstanceInfoAck::CloseFrameworkInstanceInfoAck(const CloseFrameworkInstanceInfoAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseFrameworkInstanceInfoAck::SharedCtor() {
  _cached_size_ = 0;
  statuscode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseFrameworkInstanceInfoAck::~CloseFrameworkInstanceInfoAck() {
  SharedDtor();
}

void CloseFrameworkInstanceInfoAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseFrameworkInstanceInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseFrameworkInstanceInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseFrameworkInstanceInfoAck_descriptor_;
}

const CloseFrameworkInstanceInfoAck& CloseFrameworkInstanceInfoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FwmRcProtocol_2eproto();  return *default_instance_;
}

CloseFrameworkInstanceInfoAck* CloseFrameworkInstanceInfoAck::default_instance_ = NULL;

CloseFrameworkInstanceInfoAck* CloseFrameworkInstanceInfoAck::New() const {
  return new CloseFrameworkInstanceInfoAck;
}

void CloseFrameworkInstanceInfoAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statuscode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseFrameworkInstanceInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statuscode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseFrameworkInstanceInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseFrameworkInstanceInfoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 statuscode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseFrameworkInstanceInfoAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statuscode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseFrameworkInstanceInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseFrameworkInstanceInfoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseFrameworkInstanceInfoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseFrameworkInstanceInfoAck::MergeFrom(const CloseFrameworkInstanceInfoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseFrameworkInstanceInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseFrameworkInstanceInfoAck::CopyFrom(const CloseFrameworkInstanceInfoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseFrameworkInstanceInfoAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CloseFrameworkInstanceInfoAck::Swap(CloseFrameworkInstanceInfoAck* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseFrameworkInstanceInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseFrameworkInstanceInfoAck_descriptor_;
  metadata.reflection = CloseFrameworkInstanceInfoAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FwmRcProto

// @@protoc_insertion_point(global_scope)
