// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSG_CLIENT_DM_CROSS_DBINFO_GET.proto

#ifndef PROTOBUF_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto__INCLUDED
#define PROTOBUF_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
void protobuf_AssignDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
void protobuf_ShutdownFile_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();

class MSG_CLIENT_DM_CROSS_DBINFO_GET;
class MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK;
class MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO;
class MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO;
class MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO;
class MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO;
class MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO;

enum MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType {
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_VARCHAR = 0,
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_INT = 1,
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_DOUBLe = 2,
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_TEXT = 3,
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_BLOB = 4,
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_TIMEStamp = 5
};
bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_IsValid(int value);
const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_ColumnType_MIN = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_VARCHAR;
const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_ColumnType_MAX = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_TIMEStamp;
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_ColumnType_ARRAYSIZE = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_ColumnType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_descriptor();
inline const ::std::string& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_Name(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_descriptor(), value);
}
inline bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_Parse(
    const ::std::string& name, MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType>(
    MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_descriptor(), name, value);
}
// ===================================================================

class MSG_CLIENT_DM_CROSS_DBINFO_GET : public ::google::protobuf::Message {
 public:
  MSG_CLIENT_DM_CROSS_DBINFO_GET();
  virtual ~MSG_CLIENT_DM_CROSS_DBINFO_GET();
  
  MSG_CLIENT_DM_CROSS_DBINFO_GET(const MSG_CLIENT_DM_CROSS_DBINFO_GET& from);
  
  inline MSG_CLIENT_DM_CROSS_DBINFO_GET& operator=(const MSG_CLIENT_DM_CROSS_DBINFO_GET& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_CLIENT_DM_CROSS_DBINFO_GET& default_instance();
  
  void Swap(MSG_CLIENT_DM_CROSS_DBINFO_GET* other);
  
  // implements Message ----------------------------------------------
  
  MSG_CLIENT_DM_CROSS_DBINFO_GET* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_CLIENT_DM_CROSS_DBINFO_GET& from);
  void MergeFrom(const MSG_CLIENT_DM_CROSS_DBINFO_GET& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  
  // @@protoc_insertion_point(class_scope:MSG_CLIENT_DM_CROSS_DBINFO_GET)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* token_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  
  void InitAsDefaultInstance();
  static MSG_CLIENT_DM_CROSS_DBINFO_GET* default_instance_;
};
// -------------------------------------------------------------------

class MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO : public ::google::protobuf::Message {
 public:
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO();
  virtual ~MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO();
  
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO& from);
  
  inline MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO& operator=(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO& default_instance();
  
  void Swap(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO* other);
  
  // implements Message ----------------------------------------------
  
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO& from);
  void MergeFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType ColumnType;
  static const ColumnType VARCHAR = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_VARCHAR;
  static const ColumnType INT = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_INT;
  static const ColumnType DOUBLe = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_DOUBLe;
  static const ColumnType TEXT = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_TEXT;
  static const ColumnType BLOB = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_BLOB;
  static const ColumnType TIMEStamp = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_TIMEStamp;
  static inline bool ColumnType_IsValid(int value) {
    return MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_IsValid(value);
  }
  static const ColumnType ColumnType_MIN =
    MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_ColumnType_MIN;
  static const ColumnType ColumnType_MAX =
    MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_ColumnType_MAX;
  static const int ColumnType_ARRAYSIZE =
    MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_ColumnType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ColumnType_descriptor() {
    return MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_descriptor();
  }
  static inline const ::std::string& ColumnType_Name(ColumnType value) {
    return MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_Name(value);
  }
  static inline bool ColumnType_Parse(const ::std::string& name,
      ColumnType* value) {
    return MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string columnName = 1;
  inline bool has_columnname() const;
  inline void clear_columnname();
  static const int kColumnNameFieldNumber = 1;
  inline const ::std::string& columnname() const;
  inline void set_columnname(const ::std::string& value);
  inline void set_columnname(const char* value);
  inline void set_columnname(const char* value, size_t size);
  inline ::std::string* mutable_columnname();
  inline ::std::string* release_columnname();
  
  // optional .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO.ColumnType columnType = 2;
  inline bool has_columntype() const;
  inline void clear_columntype();
  static const int kColumnTypeFieldNumber = 2;
  inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType columntype() const;
  inline void set_columntype(::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType value);
  
  // @@protoc_insertion_point(class_scope:MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO)
 private:
  inline void set_has_columnname();
  inline void clear_has_columnname();
  inline void set_has_columntype();
  inline void clear_has_columntype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* columnname_;
  int columntype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  
  void InitAsDefaultInstance();
  static MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO* default_instance_;
};
// -------------------------------------------------------------------

class MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO : public ::google::protobuf::Message {
 public:
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO();
  virtual ~MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO();
  
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO& from);
  
  inline MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO& operator=(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO& default_instance();
  
  void Swap(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO* other);
  
  // implements Message ----------------------------------------------
  
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO& from);
  void MergeFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO COLUMN_INFO;
  
  // accessors -------------------------------------------------------
  
  // optional string tbName = 1;
  inline bool has_tbname() const;
  inline void clear_tbname();
  static const int kTbNameFieldNumber = 1;
  inline const ::std::string& tbname() const;
  inline void set_tbname(const ::std::string& value);
  inline void set_tbname(const char* value);
  inline void set_tbname(const char* value, size_t size);
  inline ::std::string* mutable_tbname();
  inline ::std::string* release_tbname();
  
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO columnInfo = 2;
  inline int columninfo_size() const;
  inline void clear_columninfo();
  static const int kColumnInfoFieldNumber = 2;
  inline const ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO& columninfo(int index) const;
  inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO* mutable_columninfo(int index);
  inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO* add_columninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO >&
      columninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO >*
      mutable_columninfo();
  
  // optional uint32 rowNum = 3;
  inline bool has_rownum() const;
  inline void clear_rownum();
  static const int kRowNumFieldNumber = 3;
  inline ::google::protobuf::uint32 rownum() const;
  inline void set_rownum(::google::protobuf::uint32 value);
  
  // optional uint32 tbSize = 4;
  inline bool has_tbsize() const;
  inline void clear_tbsize();
  static const int kTbSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 tbsize() const;
  inline void set_tbsize(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO)
 private:
  inline void set_has_tbname();
  inline void clear_has_tbname();
  inline void set_has_rownum();
  inline void clear_has_rownum();
  inline void set_has_tbsize();
  inline void clear_has_tbsize();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* tbname_;
  ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO > columninfo_;
  ::google::protobuf::uint32 rownum_;
  ::google::protobuf::uint32 tbsize_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  
  void InitAsDefaultInstance();
  static MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO* default_instance_;
};
// -------------------------------------------------------------------

class MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO : public ::google::protobuf::Message {
 public:
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO();
  virtual ~MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO();
  
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO& from);
  
  inline MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO& operator=(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO& default_instance();
  
  void Swap(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO* other);
  
  // implements Message ----------------------------------------------
  
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO& from);
  void MergeFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string dbName = 1;
  inline bool has_dbname() const;
  inline void clear_dbname();
  static const int kDbNameFieldNumber = 1;
  inline const ::std::string& dbname() const;
  inline void set_dbname(const ::std::string& value);
  inline void set_dbname(const char* value);
  inline void set_dbname(const char* value, size_t size);
  inline ::std::string* mutable_dbname();
  inline ::std::string* release_dbname();
  
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO tbInfo = 2;
  inline int tbinfo_size() const;
  inline void clear_tbinfo();
  static const int kTbInfoFieldNumber = 2;
  inline const ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO& tbinfo(int index) const;
  inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO* mutable_tbinfo(int index);
  inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO* add_tbinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO >&
      tbinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO >*
      mutable_tbinfo();
  
  // @@protoc_insertion_point(class_scope:MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DB_INFO)
 private:
  inline void set_has_dbname();
  inline void clear_has_dbname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* dbname_;
  ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO > tbinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  
  void InitAsDefaultInstance();
  static MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO* default_instance_;
};
// -------------------------------------------------------------------

class MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO : public ::google::protobuf::Message {
 public:
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO();
  virtual ~MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO();
  
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO& from);
  
  inline MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO& operator=(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO& default_instance();
  
  void Swap(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO* other);
  
  // implements Message ----------------------------------------------
  
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO& from);
  void MergeFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string groupName = 1;
  inline bool has_groupname() const;
  inline void clear_groupname();
  static const int kGroupNameFieldNumber = 1;
  inline const ::std::string& groupname() const;
  inline void set_groupname(const ::std::string& value);
  inline void set_groupname(const char* value);
  inline void set_groupname(const char* value, size_t size);
  inline ::std::string* mutable_groupname();
  inline ::std::string* release_groupname();
  
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DB_INFO gDbInfo = 2;
  inline int gdbinfo_size() const;
  inline void clear_gdbinfo();
  static const int kGDbInfoFieldNumber = 2;
  inline const ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO& gdbinfo(int index) const;
  inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO* mutable_gdbinfo(int index);
  inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO* add_gdbinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO >&
      gdbinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO >*
      mutable_gdbinfo();
  
  // @@protoc_insertion_point(class_scope:MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.GROUP_DB_INFO)
 private:
  inline void set_has_groupname();
  inline void clear_has_groupname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* groupname_;
  ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO > gdbinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  
  void InitAsDefaultInstance();
  static MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO* default_instance_;
};
// -------------------------------------------------------------------

class MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO : public ::google::protobuf::Message {
 public:
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO();
  virtual ~MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO();
  
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO& from);
  
  inline MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO& operator=(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO& default_instance();
  
  void Swap(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* other);
  
  // implements Message ----------------------------------------------
  
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO& from);
  void MergeFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string domainName = 1;
  inline bool has_domainname() const;
  inline void clear_domainname();
  static const int kDomainNameFieldNumber = 1;
  inline const ::std::string& domainname() const;
  inline void set_domainname(const ::std::string& value);
  inline void set_domainname(const char* value);
  inline void set_domainname(const char* value, size_t size);
  inline ::std::string* mutable_domainname();
  inline ::std::string* release_domainname();
  
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.GROUP_DB_INFO dDbInfo = 2;
  inline int ddbinfo_size() const;
  inline void clear_ddbinfo();
  static const int kDDbInfoFieldNumber = 2;
  inline const ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO& ddbinfo(int index) const;
  inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO* mutable_ddbinfo(int index);
  inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO* add_ddbinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO >&
      ddbinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO >*
      mutable_ddbinfo();
  
  // @@protoc_insertion_point(class_scope:MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DOMAIN_DB_INFO)
 private:
  inline void set_has_domainname();
  inline void clear_has_domainname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* domainname_;
  ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO > ddbinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  
  void InitAsDefaultInstance();
  static MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* default_instance_;
};
// -------------------------------------------------------------------

class MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK : public ::google::protobuf::Message {
 public:
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK();
  virtual ~MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK();
  
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK& from);
  
  inline MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK& operator=(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK& default_instance();
  
  void Swap(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK* other);
  
  // implements Message ----------------------------------------------
  
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK& from);
  void MergeFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO TB_INFO;
  typedef MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO DB_INFO;
  typedef MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO GROUP_DB_INFO;
  typedef MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO DOMAIN_DB_INFO;
  
  // accessors -------------------------------------------------------
  
  // optional int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);
  
  // optional .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DOMAIN_DB_INFO domainDbInfo = 2;
  inline bool has_domaindbinfo() const;
  inline void clear_domaindbinfo();
  static const int kDomainDbInfoFieldNumber = 2;
  inline const ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO& domaindbinfo() const;
  inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* mutable_domaindbinfo();
  inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* release_domaindbinfo();
  
  // @@protoc_insertion_point(class_scope:MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_domaindbinfo();
  inline void clear_has_domaindbinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* domaindbinfo_;
  ::google::protobuf::int32 statuscode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  
  void InitAsDefaultInstance();
  static MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK* default_instance_;
};
// ===================================================================


// ===================================================================

// MSG_CLIENT_DM_CROSS_DBINFO_GET

// optional string token = 1;
inline bool MSG_CLIENT_DM_CROSS_DBINFO_GET::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_CLIENT_DM_CROSS_DBINFO_GET::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_CLIENT_DM_CROSS_DBINFO_GET::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_CLIENT_DM_CROSS_DBINFO_GET::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& MSG_CLIENT_DM_CROSS_DBINFO_GET::token() const {
  return *token_;
}
inline void MSG_CLIENT_DM_CROSS_DBINFO_GET::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void MSG_CLIENT_DM_CROSS_DBINFO_GET::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void MSG_CLIENT_DM_CROSS_DBINFO_GET::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_CLIENT_DM_CROSS_DBINFO_GET::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* MSG_CLIENT_DM_CROSS_DBINFO_GET::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO

// optional string columnName = 1;
inline bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::has_columnname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::set_has_columnname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::clear_has_columnname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::clear_columnname() {
  if (columnname_ != &::google::protobuf::internal::kEmptyString) {
    columnname_->clear();
  }
  clear_has_columnname();
}
inline const ::std::string& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::columnname() const {
  return *columnname_;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::set_columnname(const ::std::string& value) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(value);
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::set_columnname(const char* value) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(value);
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::set_columnname(const char* value, size_t size) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::mutable_columnname() {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    columnname_ = new ::std::string;
  }
  return columnname_;
}
inline ::std::string* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::release_columnname() {
  clear_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = columnname_;
    columnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO.ColumnType columnType = 2;
inline bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::has_columntype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::set_has_columntype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::clear_has_columntype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::clear_columntype() {
  columntype_ = 0;
  clear_has_columntype();
}
inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::columntype() const {
  return static_cast< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType >(columntype_);
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::set_columntype(::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType value) {
  GOOGLE_DCHECK(::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_IsValid(value));
  set_has_columntype();
  columntype_ = value;
}

// -------------------------------------------------------------------

// MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO

// optional string tbName = 1;
inline bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::has_tbname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::set_has_tbname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::clear_has_tbname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::clear_tbname() {
  if (tbname_ != &::google::protobuf::internal::kEmptyString) {
    tbname_->clear();
  }
  clear_has_tbname();
}
inline const ::std::string& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::tbname() const {
  return *tbname_;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::set_tbname(const ::std::string& value) {
  set_has_tbname();
  if (tbname_ == &::google::protobuf::internal::kEmptyString) {
    tbname_ = new ::std::string;
  }
  tbname_->assign(value);
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::set_tbname(const char* value) {
  set_has_tbname();
  if (tbname_ == &::google::protobuf::internal::kEmptyString) {
    tbname_ = new ::std::string;
  }
  tbname_->assign(value);
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::set_tbname(const char* value, size_t size) {
  set_has_tbname();
  if (tbname_ == &::google::protobuf::internal::kEmptyString) {
    tbname_ = new ::std::string;
  }
  tbname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::mutable_tbname() {
  set_has_tbname();
  if (tbname_ == &::google::protobuf::internal::kEmptyString) {
    tbname_ = new ::std::string;
  }
  return tbname_;
}
inline ::std::string* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::release_tbname() {
  clear_has_tbname();
  if (tbname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tbname_;
    tbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO columnInfo = 2;
inline int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::columninfo_size() const {
  return columninfo_.size();
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::clear_columninfo() {
  columninfo_.Clear();
}
inline const ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::columninfo(int index) const {
  return columninfo_.Get(index);
}
inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::mutable_columninfo(int index) {
  return columninfo_.Mutable(index);
}
inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::add_columninfo() {
  return columninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO >&
MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::columninfo() const {
  return columninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO >*
MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::mutable_columninfo() {
  return &columninfo_;
}

// optional uint32 rowNum = 3;
inline bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::has_rownum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::set_has_rownum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::clear_has_rownum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::clear_rownum() {
  rownum_ = 0u;
  clear_has_rownum();
}
inline ::google::protobuf::uint32 MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::rownum() const {
  return rownum_;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::set_rownum(::google::protobuf::uint32 value) {
  set_has_rownum();
  rownum_ = value;
}

// optional uint32 tbSize = 4;
inline bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::has_tbsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::set_has_tbsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::clear_has_tbsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::clear_tbsize() {
  tbsize_ = 0u;
  clear_has_tbsize();
}
inline ::google::protobuf::uint32 MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::tbsize() const {
  return tbsize_;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::set_tbsize(::google::protobuf::uint32 value) {
  set_has_tbsize();
  tbsize_ = value;
}

// -------------------------------------------------------------------

// MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO

// optional string dbName = 1;
inline bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::has_dbname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::set_has_dbname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::clear_has_dbname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::clear_dbname() {
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    dbname_->clear();
  }
  clear_has_dbname();
}
inline const ::std::string& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::dbname() const {
  return *dbname_;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::set_dbname(const ::std::string& value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::set_dbname(const char* value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::set_dbname(const char* value, size_t size) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::mutable_dbname() {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  return dbname_;
}
inline ::std::string* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::release_dbname() {
  clear_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dbname_;
    dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO tbInfo = 2;
inline int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::tbinfo_size() const {
  return tbinfo_.size();
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::clear_tbinfo() {
  tbinfo_.Clear();
}
inline const ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::tbinfo(int index) const {
  return tbinfo_.Get(index);
}
inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::mutable_tbinfo(int index) {
  return tbinfo_.Mutable(index);
}
inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::add_tbinfo() {
  return tbinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO >&
MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::tbinfo() const {
  return tbinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO >*
MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::mutable_tbinfo() {
  return &tbinfo_;
}

// -------------------------------------------------------------------

// MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO

// optional string groupName = 1;
inline bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::has_groupname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::set_has_groupname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::clear_groupname() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    groupname_->clear();
  }
  clear_has_groupname();
}
inline const ::std::string& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::groupname() const {
  return *groupname_;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::set_groupname(const ::std::string& value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::set_groupname(const char* value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::mutable_groupname() {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  return groupname_;
}
inline ::std::string* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::release_groupname() {
  clear_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupname_;
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DB_INFO gDbInfo = 2;
inline int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::gdbinfo_size() const {
  return gdbinfo_.size();
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::clear_gdbinfo() {
  gdbinfo_.Clear();
}
inline const ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::gdbinfo(int index) const {
  return gdbinfo_.Get(index);
}
inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::mutable_gdbinfo(int index) {
  return gdbinfo_.Mutable(index);
}
inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::add_gdbinfo() {
  return gdbinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO >&
MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::gdbinfo() const {
  return gdbinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO >*
MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::mutable_gdbinfo() {
  return &gdbinfo_;
}

// -------------------------------------------------------------------

// MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO

// optional string domainName = 1;
inline bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::has_domainname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::set_has_domainname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::clear_has_domainname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::clear_domainname() {
  if (domainname_ != &::google::protobuf::internal::kEmptyString) {
    domainname_->clear();
  }
  clear_has_domainname();
}
inline const ::std::string& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::domainname() const {
  return *domainname_;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::set_domainname(const ::std::string& value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::kEmptyString) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::set_domainname(const char* value) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::kEmptyString) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(value);
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::set_domainname(const char* value, size_t size) {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::kEmptyString) {
    domainname_ = new ::std::string;
  }
  domainname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::mutable_domainname() {
  set_has_domainname();
  if (domainname_ == &::google::protobuf::internal::kEmptyString) {
    domainname_ = new ::std::string;
  }
  return domainname_;
}
inline ::std::string* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::release_domainname() {
  clear_has_domainname();
  if (domainname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domainname_;
    domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.GROUP_DB_INFO dDbInfo = 2;
inline int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::ddbinfo_size() const {
  return ddbinfo_.size();
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::clear_ddbinfo() {
  ddbinfo_.Clear();
}
inline const ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::ddbinfo(int index) const {
  return ddbinfo_.Get(index);
}
inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::mutable_ddbinfo(int index) {
  return ddbinfo_.Mutable(index);
}
inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::add_ddbinfo() {
  return ddbinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO >&
MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::ddbinfo() const {
  return ddbinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO >*
MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::mutable_ddbinfo() {
  return &ddbinfo_;
}

// -------------------------------------------------------------------

// MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK

// optional int32 statusCode = 1;
inline bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::statuscode() const {
  return statuscode_;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
}

// optional .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DOMAIN_DB_INFO domainDbInfo = 2;
inline bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::has_domaindbinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::set_has_domaindbinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::clear_has_domaindbinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::clear_domaindbinfo() {
  if (domaindbinfo_ != NULL) domaindbinfo_->::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::Clear();
  clear_has_domaindbinfo();
}
inline const ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::domaindbinfo() const {
  return domaindbinfo_ != NULL ? *domaindbinfo_ : *default_instance_->domaindbinfo_;
}
inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::mutable_domaindbinfo() {
  set_has_domaindbinfo();
  if (domaindbinfo_ == NULL) domaindbinfo_ = new ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO;
  return domaindbinfo_;
}
inline ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::release_domaindbinfo() {
  clear_has_domaindbinfo();
  ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* temp = domaindbinfo_;
  domaindbinfo_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType>() {
  return ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto__INCLUDED
