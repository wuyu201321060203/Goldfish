// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSG_CLIENT_DM_CROSS_DBINFO_GET.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MSG_CLIENT_DM_CROSS_DBINFO_GET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_CLIENT_DM_CROSS_DBINFO_GET_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto() {
  protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSG_CLIENT_DM_CROSS_DBINFO_GET.proto");
  GOOGLE_CHECK(file != NULL);
  MSG_CLIENT_DM_CROSS_DBINFO_GET_descriptor_ = file->message_type(0);
  static const int MSG_CLIENT_DM_CROSS_DBINFO_GET_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CLIENT_DM_CROSS_DBINFO_GET, token_),
  };
  MSG_CLIENT_DM_CROSS_DBINFO_GET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_CLIENT_DM_CROSS_DBINFO_GET_descriptor_,
      MSG_CLIENT_DM_CROSS_DBINFO_GET::default_instance_,
      MSG_CLIENT_DM_CROSS_DBINFO_GET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CLIENT_DM_CROSS_DBINFO_GET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CLIENT_DM_CROSS_DBINFO_GET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_CLIENT_DM_CROSS_DBINFO_GET));
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_descriptor_ = file->message_type(1);
  static const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK, domaindbinfo_),
  };
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_descriptor_,
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::default_instance_,
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK));
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_descriptor_ = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_descriptor_->nested_type(0);
  static const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO, tbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO, columninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO, rownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO, tbsize_),
  };
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_descriptor_,
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::default_instance_,
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO));
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_descriptor_ = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_descriptor_->nested_type(0);
  static const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO, columnname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO, columntype_),
  };
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_descriptor_,
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::default_instance_,
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO));
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_descriptor_ = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_descriptor_->enum_type(0);
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO_descriptor_ = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_descriptor_->nested_type(1);
  static const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO, dbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO, tbinfo_),
  };
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO_descriptor_,
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::default_instance_,
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO));
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO_descriptor_ = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_descriptor_->nested_type(2);
  static const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO, gdbinfo_),
  };
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO_descriptor_,
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::default_instance_,
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO));
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO_descriptor_ = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_descriptor_->nested_type(3);
  static const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO, domainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO, ddbinfo_),
  };
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO_descriptor_,
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::default_instance_,
      MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_CLIENT_DM_CROSS_DBINFO_GET_descriptor_, &MSG_CLIENT_DM_CROSS_DBINFO_GET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_descriptor_, &MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_descriptor_, &MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_descriptor_, &MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO_descriptor_, &MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO_descriptor_, &MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO_descriptor_, &MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto() {
  delete MSG_CLIENT_DM_CROSS_DBINFO_GET::default_instance_;
  delete MSG_CLIENT_DM_CROSS_DBINFO_GET_reflection_;
  delete MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::default_instance_;
  delete MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_reflection_;
  delete MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::default_instance_;
  delete MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_reflection_;
  delete MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::default_instance_;
  delete MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_reflection_;
  delete MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::default_instance_;
  delete MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO_reflection_;
  delete MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::default_instance_;
  delete MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO_reflection_;
  delete MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::default_instance_;
  delete MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO_reflection_;
}

void protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$MSG_CLIENT_DM_CROSS_DBINFO_GET.proto\"/"
    "\n\036MSG_CLIENT_DM_CROSS_DBINFO_GET\022\r\n\005toke"
    "n\030\001 \001(\t\"\376\005\n\"MSG_DM_CLIENT_CROSS_DBINFO_G"
    "ET_ACK\022\022\n\nstatusCode\030\001 \001(\005\022H\n\014domainDbIn"
    "fo\030\002 \001(\01322.MSG_DM_CLIENT_CROSS_DBINFO_GE"
    "T_ACK.DOMAIN_DB_INFO\032\325\002\n\007TB_INFO\022\016\n\006tbNa"
    "me\030\001 \001(\t\022K\n\ncolumnInfo\030\002 \003(\01327.MSG_DM_CL"
    "IENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN"
    "_INFO\022\016\n\006rowNum\030\003 \001(\r\022\016\n\006tbSize\030\004 \001(\r\032\314\001"
    "\n\013COLUMN_INFO\022\022\n\ncolumnName\030\001 \001(\t\022V\n\ncol"
    "umnType\030\002 \001(\0162B.MSG_DM_CLIENT_CROSS_DBIN"
    "FO_GET_ACK.TB_INFO.COLUMN_INFO.ColumnTyp"
    "e\"Q\n\nColumnType\022\013\n\007VARCHAR\020\000\022\007\n\003INT\020\001\022\n\n"
    "\006DOUBLe\020\002\022\010\n\004TEXT\020\003\022\010\n\004BLOB\020\004\022\r\n\tTIMESta"
    "mp\020\005\032V\n\007DB_INFO\022\016\n\006dbName\030\001 \001(\t\022;\n\006tbInf"
    "o\030\002 \003(\0132+.MSG_DM_CLIENT_CROSS_DBINFO_GET"
    "_ACK.TB_INFO\032`\n\rGROUP_DB_INFO\022\021\n\tgroupNa"
    "me\030\001 \001(\t\022<\n\007gDbInfo\030\002 \003(\0132+.MSG_DM_CLIEN"
    "T_CROSS_DBINFO_GET_ACK.DB_INFO\032h\n\016DOMAIN"
    "_DB_INFO\022\022\n\ndomainName\030\001 \001(\t\022B\n\007dDbInfo\030"
    "\002 \003(\01321.MSG_DM_CLIENT_CROSS_DBINFO_GET_A"
    "CK.GROUP_DB_INFO", 856);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSG_CLIENT_DM_CROSS_DBINFO_GET.proto", &protobuf_RegisterTypes);
  MSG_CLIENT_DM_CROSS_DBINFO_GET::default_instance_ = new MSG_CLIENT_DM_CROSS_DBINFO_GET();
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::default_instance_ = new MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK();
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::default_instance_ = new MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO();
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::default_instance_ = new MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO();
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::default_instance_ = new MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO();
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::default_instance_ = new MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO();
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::default_instance_ = new MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO();
  MSG_CLIENT_DM_CROSS_DBINFO_GET::default_instance_->InitAsDefaultInstance();
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::default_instance_->InitAsDefaultInstance();
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::default_instance_->InitAsDefaultInstance();
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::default_instance_->InitAsDefaultInstance();
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::default_instance_->InitAsDefaultInstance();
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::default_instance_->InitAsDefaultInstance();
  MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto {
  StaticDescriptorInitializer_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto() {
    protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();
  }
} static_descriptor_initializer_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MSG_CLIENT_DM_CROSS_DBINFO_GET::kTokenFieldNumber;
#endif  // !_MSC_VER

MSG_CLIENT_DM_CROSS_DBINFO_GET::MSG_CLIENT_DM_CROSS_DBINFO_GET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_CLIENT_DM_CROSS_DBINFO_GET::InitAsDefaultInstance() {
}

MSG_CLIENT_DM_CROSS_DBINFO_GET::MSG_CLIENT_DM_CROSS_DBINFO_GET(const MSG_CLIENT_DM_CROSS_DBINFO_GET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_CLIENT_DM_CROSS_DBINFO_GET::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_CLIENT_DM_CROSS_DBINFO_GET::~MSG_CLIENT_DM_CROSS_DBINFO_GET() {
  SharedDtor();
}

void MSG_CLIENT_DM_CROSS_DBINFO_GET::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void MSG_CLIENT_DM_CROSS_DBINFO_GET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_CLIENT_DM_CROSS_DBINFO_GET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_CLIENT_DM_CROSS_DBINFO_GET_descriptor_;
}

const MSG_CLIENT_DM_CROSS_DBINFO_GET& MSG_CLIENT_DM_CROSS_DBINFO_GET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();  return *default_instance_;
}

MSG_CLIENT_DM_CROSS_DBINFO_GET* MSG_CLIENT_DM_CROSS_DBINFO_GET::default_instance_ = NULL;

MSG_CLIENT_DM_CROSS_DBINFO_GET* MSG_CLIENT_DM_CROSS_DBINFO_GET::New() const {
  return new MSG_CLIENT_DM_CROSS_DBINFO_GET;
}

void MSG_CLIENT_DM_CROSS_DBINFO_GET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_CLIENT_DM_CROSS_DBINFO_GET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_CLIENT_DM_CROSS_DBINFO_GET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_CLIENT_DM_CROSS_DBINFO_GET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_CLIENT_DM_CROSS_DBINFO_GET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_CLIENT_DM_CROSS_DBINFO_GET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_CLIENT_DM_CROSS_DBINFO_GET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_CLIENT_DM_CROSS_DBINFO_GET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_CLIENT_DM_CROSS_DBINFO_GET::MergeFrom(const MSG_CLIENT_DM_CROSS_DBINFO_GET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_CLIENT_DM_CROSS_DBINFO_GET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_CLIENT_DM_CROSS_DBINFO_GET::CopyFrom(const MSG_CLIENT_DM_CROSS_DBINFO_GET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_CLIENT_DM_CROSS_DBINFO_GET::IsInitialized() const {
  
  return true;
}

void MSG_CLIENT_DM_CROSS_DBINFO_GET::Swap(MSG_CLIENT_DM_CROSS_DBINFO_GET* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_CLIENT_DM_CROSS_DBINFO_GET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_CLIENT_DM_CROSS_DBINFO_GET_descriptor_;
  metadata.reflection = MSG_CLIENT_DM_CROSS_DBINFO_GET_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_descriptor_;
}
bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::VARCHAR;
const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::INT;
const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::DOUBLe;
const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::TEXT;
const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::BLOB;
const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::TIMEStamp;
const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::ColumnType_MIN;
const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::ColumnType_MAX;
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::ColumnType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::kColumnNameFieldNumber;
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::kColumnTypeFieldNumber;
#endif  // !_MSC_VER

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::InitAsDefaultInstance() {
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::SharedCtor() {
  _cached_size_ = 0;
  columnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  columntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::~MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO() {
  SharedDtor();
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::SharedDtor() {
  if (columnname_ != &::google::protobuf::internal::kEmptyString) {
    delete columnname_;
  }
  if (this != default_instance_) {
  }
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_descriptor_;
}

const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();  return *default_instance_;
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::default_instance_ = NULL;

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::New() const {
  return new MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_columnname()) {
      if (columnname_ != &::google::protobuf::internal::kEmptyString) {
        columnname_->clear();
      }
    }
    columntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string columnName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_columnname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->columnname().data(), this->columnname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_columnType;
        break;
      }
      
      // optional .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO.ColumnType columnType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_columnType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType_IsValid(value)) {
            set_columntype(static_cast< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_ColumnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string columnName = 1;
  if (has_columnname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->columnname(), output);
  }
  
  // optional .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO.ColumnType columnType = 2;
  if (has_columntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->columntype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string columnName = 1;
  if (has_columnname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->columnname(), target);
  }
  
  // optional .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO.ColumnType columnType = 2;
  if (has_columntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->columntype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string columnName = 1;
    if (has_columnname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->columnname());
    }
    
    // optional .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO.ColumnType columnType = 2;
    if (has_columntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->columntype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::MergeFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_columnname()) {
      set_columnname(from.columnname());
    }
    if (from.has_columntype()) {
      set_columntype(from.columntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::CopyFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::IsInitialized() const {
  
  return true;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::Swap(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO* other) {
  if (other != this) {
    std::swap(columnname_, other->columnname_);
    std::swap(columntype_, other->columntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_descriptor_;
  metadata.reflection = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_COLUMN_INFO_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::kTbNameFieldNumber;
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::kColumnInfoFieldNumber;
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::kRowNumFieldNumber;
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::kTbSizeFieldNumber;
#endif  // !_MSC_VER

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::InitAsDefaultInstance() {
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::SharedCtor() {
  _cached_size_ = 0;
  tbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rownum_ = 0u;
  tbsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::~MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO() {
  SharedDtor();
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::SharedDtor() {
  if (tbname_ != &::google::protobuf::internal::kEmptyString) {
    delete tbname_;
  }
  if (this != default_instance_) {
  }
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_descriptor_;
}

const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();  return *default_instance_;
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::default_instance_ = NULL;

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::New() const {
  return new MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tbname()) {
      if (tbname_ != &::google::protobuf::internal::kEmptyString) {
        tbname_->clear();
      }
    }
    rownum_ = 0u;
    tbsize_ = 0u;
  }
  columninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tbName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tbname().data(), this->tbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_columnInfo;
        break;
      }
      
      // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO columnInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columnInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_columnInfo;
        if (input->ExpectTag(24)) goto parse_rowNum;
        break;
      }
      
      // optional uint32 rowNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rowNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rownum_)));
          set_has_rownum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tbSize;
        break;
      }
      
      // optional uint32 tbSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tbSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbsize_)));
          set_has_tbsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tbName = 1;
  if (has_tbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tbname().data(), this->tbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tbname(), output);
  }
  
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO columnInfo = 2;
  for (int i = 0; i < this->columninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columninfo(i), output);
  }
  
  // optional uint32 rowNum = 3;
  if (has_rownum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rownum(), output);
  }
  
  // optional uint32 tbSize = 4;
  if (has_tbsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tbsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tbName = 1;
  if (has_tbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tbname().data(), this->tbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tbname(), target);
  }
  
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO columnInfo = 2;
  for (int i = 0; i < this->columninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->columninfo(i), target);
  }
  
  // optional uint32 rowNum = 3;
  if (has_rownum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rownum(), target);
  }
  
  // optional uint32 tbSize = 4;
  if (has_tbsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tbsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tbName = 1;
    if (has_tbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tbname());
    }
    
    // optional uint32 rowNum = 3;
    if (has_rownum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rownum());
    }
    
    // optional uint32 tbSize = 4;
    if (has_tbsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbsize());
    }
    
  }
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO.COLUMN_INFO columnInfo = 2;
  total_size += 1 * this->columninfo_size();
  for (int i = 0; i < this->columninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columninfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::MergeFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  columninfo_.MergeFrom(from.columninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tbname()) {
      set_tbname(from.tbname());
    }
    if (from.has_rownum()) {
      set_rownum(from.rownum());
    }
    if (from.has_tbsize()) {
      set_tbsize(from.tbsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::CopyFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::IsInitialized() const {
  
  return true;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::Swap(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO* other) {
  if (other != this) {
    std::swap(tbname_, other->tbname_);
    columninfo_.Swap(&other->columninfo_);
    std::swap(rownum_, other->rownum_);
    std::swap(tbsize_, other->tbsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_descriptor_;
  metadata.reflection = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_TB_INFO_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::kDbNameFieldNumber;
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::kTbInfoFieldNumber;
#endif  // !_MSC_VER

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::InitAsDefaultInstance() {
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::SharedCtor() {
  _cached_size_ = 0;
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::~MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO() {
  SharedDtor();
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::SharedDtor() {
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (this != default_instance_) {
  }
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO_descriptor_;
}

const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();  return *default_instance_;
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::default_instance_ = NULL;

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::New() const {
  return new MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::kEmptyString) {
        dbname_->clear();
      }
    }
  }
  tbinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dbName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tbInfo;
        break;
      }
      
      // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO tbInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tbinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tbInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dbName = 1;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dbname(), output);
  }
  
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO tbInfo = 2;
  for (int i = 0; i < this->tbinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tbinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dbName = 1;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbname(), target);
  }
  
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO tbInfo = 2;
  for (int i = 0; i < this->tbinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tbinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dbName = 1;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }
    
  }
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.TB_INFO tbInfo = 2;
  total_size += 1 * this->tbinfo_size();
  for (int i = 0; i < this->tbinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tbinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::MergeFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  tbinfo_.MergeFrom(from.tbinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::CopyFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::IsInitialized() const {
  
  return true;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::Swap(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO* other) {
  if (other != this) {
    std::swap(dbname_, other->dbname_);
    tbinfo_.Swap(&other->tbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO_descriptor_;
  metadata.reflection = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DB_INFO_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::kGroupNameFieldNumber;
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::kGDbInfoFieldNumber;
#endif  // !_MSC_VER

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::InitAsDefaultInstance() {
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::SharedCtor() {
  _cached_size_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::~MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO() {
  SharedDtor();
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO_descriptor_;
}

const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();  return *default_instance_;
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::default_instance_ = NULL;

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::New() const {
  return new MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
  }
  gdbinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string groupName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gDbInfo;
        break;
      }
      
      // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DB_INFO gDbInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gDbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gdbinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gDbInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string groupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupname(), output);
  }
  
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DB_INFO gDbInfo = 2;
  for (int i = 0; i < this->gdbinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gdbinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string groupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupname(), target);
  }
  
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DB_INFO gDbInfo = 2;
  for (int i = 0; i < this->gdbinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gdbinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string groupName = 1;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }
    
  }
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DB_INFO gDbInfo = 2;
  total_size += 1 * this->gdbinfo_size();
  for (int i = 0; i < this->gdbinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gdbinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::MergeFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  gdbinfo_.MergeFrom(from.gdbinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::CopyFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::IsInitialized() const {
  
  return true;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::Swap(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO* other) {
  if (other != this) {
    std::swap(groupname_, other->groupname_);
    gdbinfo_.Swap(&other->gdbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO_descriptor_;
  metadata.reflection = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_GROUP_DB_INFO_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::kDomainNameFieldNumber;
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::kDDbInfoFieldNumber;
#endif  // !_MSC_VER

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::InitAsDefaultInstance() {
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::SharedCtor() {
  _cached_size_ = 0;
  domainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::~MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO() {
  SharedDtor();
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::SharedDtor() {
  if (domainname_ != &::google::protobuf::internal::kEmptyString) {
    delete domainname_;
  }
  if (this != default_instance_) {
  }
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO_descriptor_;
}

const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();  return *default_instance_;
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::default_instance_ = NULL;

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::New() const {
  return new MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domainname()) {
      if (domainname_ != &::google::protobuf::internal::kEmptyString) {
        domainname_->clear();
      }
    }
  }
  ddbinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domainName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domainname().data(), this->domainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dDbInfo;
        break;
      }
      
      // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.GROUP_DB_INFO dDbInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dDbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ddbinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dDbInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string domainName = 1;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domainname(), output);
  }
  
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.GROUP_DB_INFO dDbInfo = 2;
  for (int i = 0; i < this->ddbinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ddbinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string domainName = 1;
  if (has_domainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domainname().data(), this->domainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domainname(), target);
  }
  
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.GROUP_DB_INFO dDbInfo = 2;
  for (int i = 0; i < this->ddbinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ddbinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string domainName = 1;
    if (has_domainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainname());
    }
    
  }
  // repeated .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.GROUP_DB_INFO dDbInfo = 2;
  total_size += 1 * this->ddbinfo_size();
  for (int i = 0; i < this->ddbinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ddbinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::MergeFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  ddbinfo_.MergeFrom(from.ddbinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domainname()) {
      set_domainname(from.domainname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::CopyFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::IsInitialized() const {
  
  return true;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::Swap(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO* other) {
  if (other != this) {
    std::swap(domainname_, other->domainname_);
    ddbinfo_.Swap(&other->ddbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO_descriptor_;
  metadata.reflection = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::kStatusCodeFieldNumber;
const int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::kDomainDbInfoFieldNumber;
#endif  // !_MSC_VER

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::InitAsDefaultInstance() {
  domaindbinfo_ = const_cast< ::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO*>(&::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::default_instance());
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::SharedCtor() {
  _cached_size_ = 0;
  statuscode_ = 0;
  domaindbinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::~MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK() {
  SharedDtor();
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::SharedDtor() {
  if (this != default_instance_) {
    delete domaindbinfo_;
  }
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_descriptor_;
}

const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK& MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fCLIENT_5fDM_5fCROSS_5fDBINFO_5fGET_2eproto();  return *default_instance_;
}

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::default_instance_ = NULL;

MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::New() const {
  return new MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statuscode_ = 0;
    if (has_domaindbinfo()) {
      if (domaindbinfo_ != NULL) domaindbinfo_->::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 statusCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_domainDbInfo;
        break;
      }
      
      // optional .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DOMAIN_DB_INFO domainDbInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domainDbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_domaindbinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }
  
  // optional .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DOMAIN_DB_INFO domainDbInfo = 2;
  if (has_domaindbinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->domaindbinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }
  
  // optional .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DOMAIN_DB_INFO domainDbInfo = 2;
  if (has_domaindbinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->domaindbinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }
    
    // optional .MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK.DOMAIN_DB_INFO domainDbInfo = 2;
    if (has_domaindbinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->domaindbinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::MergeFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_domaindbinfo()) {
      mutable_domaindbinfo()->::MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_DOMAIN_DB_INFO::MergeFrom(from.domaindbinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::CopyFrom(const MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::IsInitialized() const {
  
  return true;
}

void MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::Swap(MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(domaindbinfo_, other->domaindbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_descriptor_;
  metadata.reflection = MSG_DM_CLIENT_CROSS_DBINFO_GET_ACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
